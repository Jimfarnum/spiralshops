import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Download, FileBarChart, FileText, Calendar, TrendingUp, Users, Building2, MapPin, DollarSign } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';

interface InvestorDigest {
  id: string;
  createdAt: string;
  totalRecords: number;
  csvFileName: string;
  pdfFileName: string;
  breakdown: {
    shoppers: number;
    retailers: number;
    malls: number;
    cities: number;
  };
  isAutoGenerated: boolean;
}

const InvestorsPage: React.FC = () => {
  const [latestDigest, setLatestDigest] = useState<InvestorDigest | null>(null);
  const [allDigests, setAllDigests] = useState<InvestorDigest[]>([]);
  const [loading, setLoading] = useState(true);
  const [creating, setCreating] = useState(false);
  const { toast } = useToast();

  // Fetch latest digest and all digests
  useEffect(() => {
    fetchDigests();
  }, []);

  const fetchDigests = async () => {
    try {
      setLoading(true);
      
      // Fetch latest digest
      const latestResponse = await apiRequest('/api/launch/snapshot/status');
      if (latestResponse.ok && latestResponse.digest) {
        setLatestDigest(latestResponse.digest);
      }
      
      // Fetch all digests
      const allResponse = await apiRequest('/api/launch/snapshots');
      if (allResponse.ok) {
        setAllDigests(allResponse.digests || []);
      }
    } catch (error) {
      console.error('Failed to fetch digests:', error);
      toast({
        title: "Error",
        description: "Failed to load investor digests",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const createNewDigest = async () => {
    try {
      setCreating(true);
      const response = await apiRequest('/api/launch/snapshot', { method: 'POST' });
      
      if (response.ok) {
        toast({
          title: "Success",
          description: "New investor digest created successfully",
        });
        
        // Refresh the data
        fetchDigests();
      } else {
        throw new Error(response.error || 'Failed to create digest');
      }
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to create investor digest",
        variant: "destructive"
      });
    } finally {
      setCreating(false);
    }
  };

  const downloadFile = async (digestId: string, type: 'csv' | 'pdf', fileName: string) => {
    try {
      const response = await fetch(`/api/launch/digest/${digestId}/download/${type}`);
      
      if (!response.ok) {
        throw new Error(`Failed to download ${type.toUpperCase()} file`);
      }
      
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = fileName;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      toast({
        title: "Download Started",
        description: `${fileName} is being downloaded`,
      });
    } catch (error: any) {
      toast({
        title: "Download Failed",
        description: error.message || "Failed to download file",
        variant: "destructive"
      });
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-8">
        <div className="max-w-6xl mx-auto">
          <div className="animate-pulse">
            <div className="h-8 bg-slate-200 rounded w-64 mb-6"></div>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="h-64 bg-slate-200 rounded-lg"></div>
              <div className="h-64 bg-slate-200 rounded-lg"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-emerald-500 to-blue-600 rounded-lg flex items-center justify-center">
              <TrendingUp className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-slate-800">SPIRAL Investor Portal</h1>
              <p className="text-slate-600">Real-time performance data and investor-ready reports</p>
            </div>
          </div>
          
          <Button 
            onClick={createNewDigest} 
            disabled={creating}
            className="bg-gradient-to-r from-emerald-500 to-blue-600 hover:from-emerald-600 hover:to-blue-700 text-white"
          >
            {creating ? "Generating..." : "Generate New Digest"}
            <FileBarChart className="ml-2 w-4 h-4" />
          </Button>
        </div>

        {/* Latest Digest Card */}
        {latestDigest && (
          <Card className="mb-8 border-none shadow-lg bg-gradient-to-br from-white to-slate-50">
            <CardHeader className="bg-gradient-to-r from-emerald-500 to-blue-600 text-white rounded-t-lg">
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="text-xl flex items-center gap-2">
                    <FileBarChart className="w-5 h-5" />
                    Latest Investor Digest
                  </CardTitle>
                  <CardDescription className="text-emerald-100">
                    Generated on {new Date(latestDigest.createdAt).toLocaleDateString()} at {new Date(latestDigest.createdAt).toLocaleTimeString()}
                  </CardDescription>
                </div>
                <Badge variant={latestDigest.isAutoGenerated ? "secondary" : "default"} className="bg-white/20 text-white">
                  {latestDigest.isAutoGenerated ? "Auto-Generated" : "Manual"}
                </Badge>
              </div>
            </CardHeader>
            
            <CardContent className="p-6">
              {/* Performance Overview */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                <div className="text-center p-4 bg-slate-50 rounded-lg">
                  <Users className="w-6 h-6 text-blue-600 mx-auto mb-2" />
                  <div className="text-2xl font-bold text-slate-800">{latestDigest.breakdown.shoppers}</div>
                  <div className="text-sm text-slate-600">Active Shoppers</div>
                </div>
                
                <div className="text-center p-4 bg-slate-50 rounded-lg">
                  <Building2 className="w-6 h-6 text-emerald-600 mx-auto mb-2" />
                  <div className="text-2xl font-bold text-slate-800">{latestDigest.breakdown.retailers}</div>
                  <div className="text-sm text-slate-600">Verified Retailers</div>
                </div>
                
                <div className="text-center p-4 bg-slate-50 rounded-lg">
                  <MapPin className="w-6 h-6 text-purple-600 mx-auto mb-2" />
                  <div className="text-2xl font-bold text-slate-800">{latestDigest.breakdown.malls}</div>
                  <div className="text-sm text-slate-600">Partner Malls</div>
                </div>
                
                <div className="text-center p-4 bg-slate-50 rounded-lg">
                  <DollarSign className="w-6 h-6 text-orange-600 mx-auto mb-2" />
                  <div className="text-2xl font-bold text-slate-800">{latestDigest.breakdown.cities}</div>
                  <div className="text-sm text-slate-600">Launched Cities</div>
                </div>
              </div>
              
              {/* Download Actions */}
              <div className="flex flex-col sm:flex-row gap-3">
                <Button 
                  onClick={() => downloadFile(latestDigest.id, 'pdf', latestDigest.pdfFileName)}
                  className="flex-1 bg-gradient-to-r from-emerald-500 to-blue-600 hover:from-emerald-600 hover:to-blue-700"
                >
                  <FileBarChart className="mr-2 w-4 h-4" />
                  Download PDF Report
                </Button>
                
                <Button 
                  onClick={() => downloadFile(latestDigest.id, 'csv', latestDigest.csvFileName)}
                  variant="outline"
                  className="flex-1 border-slate-300 hover:bg-slate-50"
                >
                  <FileText className="mr-2 w-4 h-4" />
                  Download CSV Data
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Historical Digests */}
        <Card className="border-none shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Calendar className="w-5 h-5" />
              Historical Investor Digests
            </CardTitle>
            <CardDescription>
              Access previous investor reports and performance data
            </CardDescription>
          </CardHeader>
          
          <CardContent>
            {allDigests.length === 0 ? (
              <div className="text-center py-8 text-slate-500">
                <FileBarChart className="w-12 h-12 mx-auto mb-4 text-slate-300" />
                <p>No investor digests available yet.</p>
                <p className="text-sm">Create your first digest to get started.</p>
              </div>
            ) : (
              <div className="space-y-3">
                {allDigests.map((digest, index) => (
                  <div key={digest.id} className="flex items-center justify-between p-4 bg-slate-50 rounded-lg hover:bg-slate-100 transition-colors">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 bg-gradient-to-br from-emerald-500 to-blue-600 rounded-lg flex items-center justify-center">
                        <span className="text-white font-bold text-sm">#{allDigests.length - index}</span>
                      </div>
                      
                      <div>
                        <div className="font-medium text-slate-800">
                          {new Date(digest.createdAt).toLocaleDateString()} - {new Date(digest.createdAt).toLocaleTimeString()}
                        </div>
                        <div className="text-sm text-slate-600">
                          {digest.totalRecords} records • 
                          {digest.breakdown.shoppers} shoppers • 
                          {digest.breakdown.retailers} retailers
                        </div>
                      </div>
                      
                      <Badge variant={digest.isAutoGenerated ? "secondary" : "default"}>
                        {digest.isAutoGenerated ? "Auto" : "Manual"}
                      </Badge>
                    </div>
                    
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => downloadFile(digest.id, 'pdf', digest.pdfFileName)}
                      >
                        <FileBarChart className="w-4 h-4" />
                      </Button>
                      
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => downloadFile(digest.id, 'csv', digest.csvFileName)}
                      >
                        <FileText className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
        
        {/* Footer Info */}
        <div className="mt-8 text-center text-slate-500 text-sm">
          <p>📧 Automated daily digests are sent at 9:00 AM Central Time</p>
          <p>🔒 All investor data is confidential and encrypted</p>
        </div>
      </div>
    </div>
  );
};

export default InvestorsPage;