Alright — here’s the full one-message code block for the Mall Manager Dashboard + AI Agent hooks, designed to be dropped directly into your Replit + IBM Cloudant + Express.js + React SPIRAL platform.

This code:

Adds a Mall Manager dashboard with a clean UI.

Creates backend routes for mall management tasks.

Connects to IBM Cloudant for mall, store, and event data.

Includes AI Agent hooks so later we can attach trained GPT/Agent assistants for automated tasks.

Fully Replit-ready — just paste into your existing project.



---

// ===== BACKEND: mallManagerRoutes.ts =====
import express from "express";
import { v4 as uuidv4 } from "uuid";
import { getCloudantDb } from "../utils/cloudantClient";

const router = express.Router();
const DB_NAME = "spiral_malls";

// Create mall entry
router.post("/malls", async (req, res) => {
  try {
    const { name, location, managerName, contactEmail } = req.body;
    if (!name || !location || !managerName || !contactEmail) {
      return res.status(400).json({ error: "Missing required fields" });
    }
    const db = await getCloudantDb(DB_NAME);
    const newMall = {
      _id: uuidv4(),
      name,
      location,
      managerName,
      contactEmail,
      stores: [],
      events: [],
      verified: false,
      createdAt: new Date().toISOString()
    };
    await db.insert(newMall);
    res.json({ success: true, mall: newMall });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get all malls
router.get("/malls", async (_req, res) => {
  try {
    const db = await getCloudantDb(DB_NAME);
    const result = await db.list({ include_docs: true });
    const malls = result.rows.map(row => row.doc);
    res.json(malls);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Add store to mall
router.post("/malls/:mallId/stores", async (req, res) => {
  try {
    const { mallId } = req.params;
    const { storeName, retailerId, category } = req.body;
    const db = await getCloudantDb(DB_NAME);
    const mallDoc = await db.get(mallId);
    mallDoc.stores.push({
      id: retailerId || uuidv4(),
      storeName,
      category,
      addedAt: new Date().toISOString()
    });
    await db.insert(mallDoc);
    res.json({ success: true, mall: mallDoc });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// AI Agent placeholder hook
router.post("/malls/:mallId/agent-task", async (req, res) => {
  try {
    // Example: AI could analyze sales trends, suggest events, or onboard stores
    const { mallId } = req.params;
    const { taskType, data } = req.body;
    // Store task in DB for later AI processing
    const db = await getCloudantDb("spiral_agent_tasks");
    await db.insert({
      _id: uuidv4(),
      mallId,
      taskType,
      data,
      status: "pending",
      createdAt: new Date().toISOString()
    });
    res.json({ success: true, message: "Task queued for AI processing" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

export default router;

// ===== FRONTEND: MallManagerDashboard.tsx =====
import React, { useEffect, useState } from "react";
import axios from "axios";

interface Mall {
  _id: string;
  name: string;
  location: string;
  managerName: string;
  contactEmail: string;
  stores: { storeName: string; category: string }[];
  events: { title: string; date: string }[];
}

const MallManagerDashboard: React.FC = () => {
  const [malls, setMalls] = useState<Mall[]>([]);
  const [formData, setFormData] = useState({
    name: "",
    location: "",
    managerName: "",
    contactEmail: ""
  });

  useEffect(() => {
    fetchMalls();
  }, []);

  const fetchMalls = async () => {
    const res = await axios.get("/api/malls");
    setMalls(res.data);
  };

  const createMall = async () => {
    await axios.post("/api/malls", formData);
    setFormData({ name: "", location: "", managerName: "", contactEmail: "" });
    fetchMalls();
  };

  return (
    <div style={{ padding: "20px" }}>
      <h1>Mall Manager Dashboard</h1>

      <section style={{ marginBottom: "20px" }}>
        <h2>Add New Mall</h2>
        <input placeholder="Mall Name" value={formData.name}
               onChange={e => setFormData({ ...formData, name: e.target.value })} />
        <input placeholder="Location" value={formData.location}
               onChange={e => setFormData({ ...formData, location: e.target.value })} />
        <input placeholder="Manager Name" value={formData.managerName}
               onChange={e => setFormData({ ...formData, managerName: e.target.value })} />
        <input placeholder="Contact Email" value={formData.contactEmail}
               onChange={e => setFormData({ ...formData, contactEmail: e.target.value })} />
        <button onClick={createMall}>Add Mall</button>
      </section>

      <section>
        <h2>Your Malls</h2>
        {malls.map(mall => (
          <div key={mall._id} style={{ border: "1px solid #ccc", padding: "10px", marginBottom: "10px" }}>
            <h3>{mall.name} ({mall.location})</h3>
            <p>Manager: {mall.managerName} | Email: {mall.contactEmail}</p>
            <p>Stores: {mall.stores.length}</p>
            <p>Events: {mall.events.length}</p>
          </div>
        ))}
      </section>
    </div>
  );
};

export default MallManagerDashboard;

// ===== utils/cloudantClient.ts =====
import { CloudantV1 } from "@ibm-cloud/cloudant";
import { IamAuthenticator } from "ibm-cloud-sdk-core";

let cloudant: CloudantV1;

export const getCloudantDb = async (dbName: string) => {
  if (!cloudant) {
    cloudant = CloudantV1.newInstance({
      authenticator: new IamAuthenticator({ apikey: process.env.CLOUDANT_APIKEY || "" }),
      serviceUrl: process.env.CLOUDANT_URL
    });
  }
  try {
    await cloudant.getDatabaseInformation({ db: dbName });
  } catch {
    await cloudant.putDatabase({ db: dbName });
  }
  return {
    insert: (doc: any) => cloudant.postDocument({ db: dbName, document: doc }),
    get: (id: string) => cloudant.getDocument({ db: dbName, docId: id }).then(r => r.result),
    list: (params: any) => cloudant.postAllDocs({ db: dbName, ...params }).then(r => r.result)
  };
};


---

Instructions to install in Replit:

1. Copy all 3 code sections into their correct /server/routes/, /client/pages/, and /server/utils/ directories.


2. Add import mallManagerRoutes from './routes/mallManagerRoutes' in your main server file and app.use("/api", mallManagerRoutes);


3. Add a route in your React router for /mall-manager-dashboard → MallManagerDashboard.


4. Make sure your .env file in Replit has:

CLOUDANT_URL=your-cloudant-url
CLOUDANT_APIKEY=your-api-key


5. Run in Replit, test adding a mall, and confirm it saves in IBM Cloudant.




---

If you want, I can immediately follow this with the seamless retailer onboarding dashboard code so that mall managers and retailers are connected in one workflow. That will make SPIRAL feel “plug-and-play” for malls and brick-and-mortar stores.

Do you want me to do that next?

