Great! Let‚Äôs proceed with Phase 2: Order History UI Components for both shoppers and retailers.


---

üßæ PHASE 2 OVERVIEW: Order History UI

We‚Äôll build:

1. ShopperOrderHistory.jsx ‚Äì Shopper‚Äôs past orders view


2. RetailerOrderDashboard.jsx ‚Äì Retailer‚Äôs order tracking and revenue summary




---

üìÅ COMPONENT 1: ShopperOrderHistory.jsx

// üì¶ /components/ShopperOrderHistory.jsx

import React, { useEffect, useState } from "react";
import axios from "axios";

const ShopperOrderHistory = ({ shopperId }) => {
  const [orders, setOrders] = useState([]);

  useEffect(() => {
    axios.get(`/api/order/shopper/${shopperId}`)
      .then(res => setOrders(res.data.orders))
      .catch(err => console.error("Failed to load order history", err));
  }, [shopperId]);

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-2">Your Order History</h2>
      {orders.length === 0 ? (
        <p>No orders yet.</p>
      ) : (
        <ul className="space-y-3">
          {orders.map(order => (
            <li key={order.orderId} className="border p-3 rounded shadow">
              <div><strong>Store ID:</strong> {order.retailerId}</div>
              <div><strong>Total:</strong> ${order.totalAmount}</div>
              <div><strong>SPIRALS Earned:</strong> {order.spiralsEarned}</div>
              <div><strong>Date:</strong> {new Date(order.timestamp).toLocaleString()}</div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default ShopperOrderHistory;


---

üìÅ COMPONENT 2: RetailerOrderDashboard.jsx

// üì¶ /components/RetailerOrderDashboard.jsx

import React, { useEffect, useState } from "react";
import axios from "axios";

const RetailerOrderDashboard = ({ retailerId }) => {
  const [orders, setOrders] = useState([]);
  const [totalRevenue, setTotalRevenue] = useState(0);

  useEffect(() => {
    axios.get(`/api/order/retailer/${retailerId}`)
      .then(res => {
        const orderList = res.data.orders;
        setOrders(orderList);
        setTotalRevenue(orderList.reduce((acc, o) => acc + parseFloat(o.totalAmount), 0));
      })
      .catch(err => console.error("Retailer order load error", err));
  }, [retailerId]);

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-3">Retailer Order Dashboard</h2>
      <div className="mb-2"><strong>Total Revenue:</strong> ${totalRevenue.toFixed(2)}</div>
      <ul className="space-y-3">
        {orders.map(order => (
          <li key={order.orderId} className="border p-3 rounded shadow">
            <div><strong>Shopper ID:</strong> {order.shopperId}</div>
            <div><strong>Total:</strong> ${order.totalAmount}</div>
            <div><strong>SPIRALS Given:</strong> {order.spiralsEarned}</div>
            <div><strong>Date:</strong> {new Date(order.timestamp).toLocaleString()}</div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default RetailerOrderDashboard;


---

‚úÖ NEXT STEPS

1. Copy both components into /components directory.


2. Import each into the appropriate dashboard routes.


3. Test each view:

Shopper view ‚Üí /<shopper-dashboard> (add test shopper ID)

Retailer view ‚Üí /retailer-dashboard (add test retailer ID)




Once tested and working, we‚Äôll move to: ‚û°Ô∏è Phase 3: Receipt PDF download + email.

Let me know once this UI is tested and ready!

