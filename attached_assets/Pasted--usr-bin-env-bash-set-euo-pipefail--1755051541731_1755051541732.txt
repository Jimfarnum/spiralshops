#!/usr/bin/env bash
set -euo pipefail

# ─────────────────────────────────────────────────────────────
# SPIRAL Feature #2 — Analytics & Intelligence Hub (MVP)
# - REST API for KPIs, timeseries, top products, zip trends
# - Event ingestion (orders + items)
# - Simple A/B experiment primitives
# - Admin dashboard UI at /admin/analytics with charts
# - Roadmap auto-update: analytics_hub → in_progress
# ─────────────────────────────────────────────────────────────

mkdir -p server public/admin data

# Create/merge package.json (ESM + express)
if [ ! -f package.json ]; then
cat > package.json << 'EOF'
{
  "name": "spiralshops",
  "version": "1.2.0",
  "type": "module",
  "private": true,
  "engines": { "node": ">=18" },
  "scripts": {
    "start": "node server/index.js",
    "dev": "node server/index.js"
  },
  "dependencies": {
    "express": "^4.19.2"
  }
}
EOF
else
  # bump version for clarity (no jq dependency)
  sed -i 's/"version": *"[^"]*"/"version": "1.2.0"/' package.json || true
fi

# ─────────────────────────────────────────────────────────────
# Minimal hardening (reuse if exists)
# ─────────────────────────────────────────────────────────────
if [ ! -f server/app-hardening.js ]; then
cat > server/app-hardening.js << 'EOF'
export function attachHardening(app) {
  app.get("/api/health", (_req, res) => {
    res.set("Cache-Control", "no-store");
    res.json({ status: "ok", service: "spiralshops", version: "1.2.0" });
  });
  app.use((req, res, next) => {
    res.setHeader("Strict-Transport-Security","max-age=31536000; includeSubDomains; preload");
    res.setHeader("X-Content-Type-Options","nosniff");
    res.setHeader("Referrer-Policy","strict-origin-when-cross-origin");
    res.setHeader("Content-Security-Policy",
      [
        "default-src 'self' https: data:",
        "script-src 'self' https: 'unsafe-inline' 'unsafe-eval'",
        "style-src 'self' https: 'unsafe-inline'",
        "img-src 'self' https: data:",
        "font-src 'self' https: data:",
        "connect-src 'self' https:",
        "frame-ancestors 'self'",
        "base-uri 'self'"
      ].join("; ")
    );
    if (req.path.startsWith("/investors") || req.path.startsWith("/admin")) {
      res.setHeader("X-Robots-Tag","noindex, nofollow");
    }
    next();
  });
}
EOF
fi

# ─────────────────────────────────────────────────────────────
# Analytics server (events + KPIs + timeseries + top products)
# ─────────────────────────────────────────────────────────────
cat > server/analytics.js << 'EOF'
import fs from "fs";
import path from "path";

const dataDir = path.join(process.cwd(), "data");
const eventsPath = path.join(dataDir, "analytics_events.json");
const customersPath = path.join(dataDir, "customers.json");
const experimentsPath = path.join(dataDir, "experiments.json");
const retailersPath = path.join(dataDir, "retailers.json");
const roadmapPath = path.join(dataDir, "roadmap.json");

function ensureFile(p, initial){ if (!fs.existsSync(p)) fs.writeFileSync(p, JSON.stringify(initial, null, 2)); }
ensureFile(eventsPath, []);        // array of events
ensureFile(customersPath, []);     // [{customer_id, first_seen, last_seen, zip, tags:[]}]
ensureFile(experimentsPath, []);   // [{id, name, variants:["A","B"], created_at}]
ensureFile(roadmapPath, { phase:"Phase 1 — Competitive Gap Closing", items:[], last_updated:"" });
ensureFile(retailersPath, [
  {"id":"ret-001","name":"Main Street Outfitters","zip":"55101","lat":44.9477,"lng":-93.0936},
  {"id":"ret-002","name":"City Mall Electronics","zip":"55415","lat":44.9730,"lng":-93.2570}
]);

function loadJSON(p){ return JSON.parse(fs.readFileSync(p,"utf-8")); }
function saveJSON(p,obj){ fs.writeFileSync(p, JSON.stringify(obj,null,2)); }
function toISO(d){ return new Date(d).toISOString(); }
function dayKey(ts){ const d = new Date(ts); return `${d.getUTCFullYear()}-${String(d.getUTCMonth()+1).padStart(2,"0")}-${String(d.getUTCDate()).padStart(2,"0")}`; }
function within(ts, from, to){ const t=+new Date(ts); return (!from || t>=+new Date(from)) && (!to || t<=+new Date(to)); }

function upsertRoadmap(id, title, status){
  const r = loadJSON(roadmapPath);
  const idx = r.items.findIndex(x=>x.id===id);
  if (idx === -1) r.items.push({ id, title, status });
  else { r.items[idx].title = title; r.items[idx].status = status || r.items[idx].status; }
  r.last_updated = new Date().toISOString();
  saveJSON(roadmapPath, r);
}

upsertRoadmap("analytics_hub","Retailer Analytics & Intelligence Hub (MVP)","in_progress");

// Basic JSON parser
function jsonParser(req,res,next){
  if (req.headers["content-type"] && req.headers["content-type"].includes("application/json")){
    let body=""; req.on("data",ch=>body+=ch);
    req.on("end",()=>{ try{ req.body = body?JSON.parse(body):{}; }catch(e){ return res.status(400).json({error:"bad_json"});} next(); });
  } else { req.body={}; next(); }
}

export function attachAnalyticsRoutes(app){

  // Ingest single event (order or item)
  // Event types:
  // - order: { type:"order", order_id, retailer_id, customer_id, zip, subtotal, tax, shipping, total, cost_total?, ts }
  // - item:  { type:"item", order_id, retailer_id, sku, title, qty, price, cost?, ts }
  app.post("/api/analytics/event", jsonParser, (req,res)=>{
    const e = req.body || {};
    if (!e.type || !e.ts) return res.status(400).json({error:"type_and_ts_required"});
    const events = loadJSON(eventsPath);
    e._id = `${e.type}-${events.length+1}`;
    events.push(e);
    saveJSON(eventsPath, events);

    // update customers
    if (e.type==="order" && e.customer_id){
      const cs = loadJSON(customersPath);
      const idx = cs.findIndex(c=>c.customer_id===e.customer_id);
      if (idx===-1) cs.push({ customer_id:e.customer_id, first_seen:e.ts, last_seen:e.ts, zip:e.zip||null, tags:[] });
      else { cs[idx].last_seen = e.ts; if (e.zip) cs[idx].zip = e.zip; }
      saveJSON(customersPath, cs);
    }
    res.json({ok:true, id:e._id});
  });

  // Bulk ingest
  app.post("/api/analytics/bulk", jsonParser, (req,res)=>{
    const { events=[] } = req.body || {};
    if (!Array.isArray(events)) return res.status(400).json({error:"events_array_required"});
    const all = loadJSON(eventsPath);
    for (const e of events){
      if (!e.type || !e.ts) continue;
      e._id = `${e.type}-${all.length+1}`;
      all.push(e);
      if (e.type==="order" && e.customer_id){
        const cs = loadJSON(customersPath);
        const idx = cs.findIndex(c=>c.customer_id===e.customer_id);
        if (idx===-1) cs.push({ customer_id:e.customer_id, first_seen:e.ts, last_seen:e.ts, zip:e.zip||null, tags:[] });
        else { cs[idx].last_seen = e.ts; if (e.zip) cs[idx].zip = e.zip; }
        saveJSON(customersPath, cs);
      }
    }
    saveJSON(eventsPath, all);
    res.json({ok:true, count: events.length});
  });

  // KPI summary for a retailer (or all)
  app.get("/api/analytics/kpis", (req,res)=>{
    const { retailer_id, from, to } = req.query;
    const events = loadJSON(eventsPath);
    const orders = events.filter(e => e.type==="order" && (!retailer_id || e.retailer_id===retailer_id) && within(e.ts, from, to));
    const items = loadJSON(eventsPath).filter(e => e.type==="item" && (!retailer_id || e.retailer_id===retailer_id) && within(e.ts, from, to));

    const revenue = orders.reduce((s,e)=> s + Number(e.total||0), 0);
    const cost    = orders.reduce((s,e)=> s + Number(e.cost_total||0), 0);
    const gross   = revenue - cost;
    const margin  = revenue > 0 ? (gross / revenue) : 0;

    const orderIds = new Set(orders.map(o=>o.order_id));
    const ordersCount = orderIds.size;
    const aov = ordersCount ? revenue / ordersCount : 0;

    // customers
    const customers = Array.from(new Set(orders.map(o=>o.customer_id).filter(Boolean)));
    const byCustomer = {};
    for (const o of orders) {
      if (!o.customer_id) continue;
      byCustomer[o.customer_id] = (byCustomer[o.customer_id]||0) + 1;
    }
    const repeatCustomers = Object.values(byCustomer).filter(n=>n>=2).length;
    const repeatRate = customers.length ? repeatCustomers / customers.length : 0;

    // Top products
    const bySku = {};
    for (const it of items){
      const key = it.sku || "unknown";
      if (!bySku[key]) bySku[key] = { sku: key, title: it.title||key, qty:0, revenue:0 };
      bySku[key].qty += Number(it.qty||0);
      bySku[key].revenue += Number(it.price||0) * Number(it.qty||0);
    }
    const topProducts = Object.values(bySku).sort((a,b)=> b.revenue-a.revenue).slice(0,10);

    // Simple CLV approximation (rolling period): AOV * avg orders per customer
    const avgOrdersPerCustomer = customers.length ? ordersCount / customers.length : 0;
    const clvApprox = aov * avgOrdersPerCustomer;

    res.json({
      retailer_id: retailer_id || "all",
      range: { from: from||null, to: to||null },
      kpis: {
        revenue: Number(revenue.toFixed(2)),
        orders: ordersCount,
        aov: Number(aov.toFixed(2)),
        gross_margin_pct: Number((margin*100).toFixed(2)),
        customers: customers.length,
        repeat_rate_pct: Number((repeatRate*100).toFixed(2)),
        clv_approx: Number(clvApprox.toFixed(2))
      },
      top_products: topProducts
    });
  });

  // Timeseries (daily/weekly/monthly)
  app.get("/api/analytics/timeseries", (req,res)=>{
    const { retailer_id, from, to, interval="daily" } = req.query;
    const orders = loadJSON(eventsPath).filter(e => e.type==="order" && (!retailer_id || e.retailer_id===retailer_id) && within(e.ts, from, to));
    const buckets = {};
    for (const o of orders){
      const k = interval==="monthly"
        ? (new Date(o.ts).getUTCFullYear()+"-"+String(new Date(o.ts).getUTCMonth()+1).padStart(2,"0"))
        : interval==="weekly"
          ? (new Date(o.ts).getUTCFullYear()+"-W"+String(Math.ceil((((new Date(o.ts) - new Date(new Date(o.ts).getUTCFullYear(),0,1)) / 86400000) + new Date(new Date(o.ts).getUTCDay())) / 7)).padStart(2,"0"))
          : dayKey(o.ts);
      (buckets[k] ||= { revenue:0, orders:0 });
      buckets[k].revenue += Number(o.total||0);
      buckets[k].orders += 1;
    }
    const series = Object.entries(buckets).sort(([a],[b])=> a.localeCompare(b)).map(([k,v])=>({ bucket:k, revenue:Number(v.revenue.toFixed(2)), orders:v.orders }));
    res.json({ interval, series });
  });

  // Zip trends (revenue by zip)
  app.get("/api/analytics/zip-trends", (req,res)=>{
    const { from, to } = req.query;
    const orders = loadJSON(eventsPath).filter(e => e.type==="order" && within(e.ts, from, to));
    const z = {};
    for (const o of orders){
      const key = o.zip || "unknown";
      (z[key] ||=