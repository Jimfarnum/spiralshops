Alright — here’s the one continuous Replit-ready code message that:

Adds QR Code Generation & Scan Logging

Logs to IBM Cloudant

Reports to SOAP G

Includes Admin Dashboard “QR Performance” Card with live analytics

Works for platform & mobile

Is fully self-contained so you can paste it into Replit and go



---

// FILE: routes/qrInviteRoutes.js

import express from "express";
import QRCode from "qrcode";
import { CloudantV1 } from "@ibm-cloud/cloudant";
import { CLOUDANT_URL, CLOUDANT_APIKEY, CLOUDANT_DB } from "../config.js";
import soapGReport from "../utils/soapGReport.js";

const router = express.Router();

// Initialize Cloudant
const cloudant = CloudantV1.newInstance({
  authenticator: new CloudantV1.IamAuthenticator({ apikey: CLOUDANT_APIKEY }),
  serviceUrl: CLOUDANT_URL,
});

// Generate QR Code
router.post("/generate-qr", async (req, res) => {
  try {
    const { retailerId, campaignName } = req.body;
    const qrData = {
      retailerId,
      campaignName,
      createdAt: new Date().toISOString(),
    };

    const qrLink = `https://spiral-platform.app/invite?retailer=${retailerId}&campaign=${encodeURIComponent(
      campaignName
    )}`;

    const qrImage = await QRCode.toDataURL(qrLink);

    // Save QR creation event to Cloudant
    await cloudant.postDocument({
      db: CLOUDANT_DB,
      document: {
        type: "qr_generated",
        ...qrData,
        qrLink,
        qrImage,
      },
    });

    // Notify SOAP G
    await soapGReport({
      agent: "MarketingAI",
      action: "QR_GENERATED",
      data: qrData,
    });

    res.json({ success: true, qrImage, qrLink });
  } catch (err) {
    console.error("QR generation error:", err);
    res.status(500).json({ error: "Failed to generate QR" });
  }
});

// Handle QR Scan
router.get("/scan", async (req, res) => {
  try {
    const { retailer, campaign } = req.query;

    // Log scan event
    await cloudant.postDocument({
      db: CLOUDANT_DB,
      document: {
        type: "qr_scan",
        retailerId: retailer,
        campaignName: campaign,
        scannedAt: new Date().toISOString(),
      },
    });

    // Notify SOAP G
    await soapGReport({
      agent: "MarketingAI",
      action: "QR_SCANNED",
      data: { retailer, campaign },
    });

    // Redirect to SPIRAL landing page (platform + mobile safe)
    res.redirect("https://spiral-platform.app/welcome");
  } catch (err) {
    console.error("QR scan log error:", err);
    res.redirect("https://spiral-platform.app/welcome");
  }
});

// Admin: Get QR Analytics
router.get("/admin/qr-analytics", async (req, res) => {
  try {
    const scans = await cloudant.postFind({
      db: CLOUDANT_DB,
      selector: { type: "qr_scan" },
    });

    const generated = await cloudant.postFind({
      db: CLOUDANT_DB,
      selector: { type: "qr_generated" },
    });

    res.json({
      totalScans: scans.result.docs.length,
      totalGenerated: generated.result.docs.length,
      scans: scans.result.docs,
      generated: generated.result.docs,
    });
  } catch (err) {
    console.error("QR analytics error:", err);
    res.status(500).json({ error: "Failed to fetch analytics" });
  }
});

export default router;

// FILE: utils/soapGReport.js

import fetch from "node-fetch";

// SOAP G Reporting Helper
export default async function soapGReport({ agent, action, data }) {
  try {
    await fetch("http://localhost:3000/api/soapg/report", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        agent,
        action,
        data,
        timestamp: new Date().toISOString(),
      }),
    });
  } catch (err) {
    console.error("SOAP G report error:", err);
  }
}

// FILE: components/AdminQRPerformanceCard.js
import React, { useEffect, useState } from "react";

export default function AdminQRPerformanceCard() {
  const [stats, setStats] = useState({ totalScans: 0, totalGenerated: 0 });

  useEffect(() => {
    fetch("/api/qr/admin/qr-analytics")
      .then((res) => res.json())
      .then((data) => setStats(data))
      .catch((err) => console.error("QR analytics fetch error:", err));
  }, []);

  return (
    <div style={{
      border: "1px solid #ddd",
      padding: "20px",
      borderRadius: "10px",
      backgroundColor: "#fff",
      boxShadow: "0px 2px 8px rgba(0,0,0,0.05)"
    }}>
      <h3>📊 QR Performance</h3>
      <p><strong>Total QR Codes Generated:</strong> {stats.totalGenerated}</p>
      <p><strong>Total Scans:</strong> {stats.totalScans}</p>
      {stats.totalGenerated > 0 && (
        <p>
          <strong>Scan Rate:</strong>{" "}
          {((stats.totalScans / stats.totalGenerated) * 100).toFixed(1)}%
        </p>
      )}
    </div>
  );
}

// FILE: config.js
export const CLOUDANT_URL = process.env.CLOUDANT_URL;
export const CLOUDANT_APIKEY = process.env.CLOUDANT_APIKEY;
export const CLOUDANT_DB = process.env.CLOUDANT_DB || "spiral_qr";

Integration Steps for Replit

1. Save qrInviteRoutes.js to /routes


2. Save soapGReport.js to /utils


3. Save AdminQRPerformanceCard.js to /components


4. In server.js (main Express file), add:



import qrInviteRoutes from "./routes/qrInviteRoutes.js";
app.use("/api/qr", qrInviteRoutes);

5. In Admin Dashboard page, import & place the QR card:



import AdminQRPerformanceCard from "../components/AdminQRPerformanceCard";

function AdminDashboard() {
  return (
    <div>
      {/* Existing admin UI */}
      <AdminQRPerformanceCard />
    </div>
  );
}

6. Add .env in Replit:



CLOUDANT_URL=your-cloudant-url
CLOUDANT_APIKEY=your-cloudant-api-key
CLOUDANT_DB=spiral_qr

7. Restart Replit.




---

This gives SPIRAL:
✅ QR Code generation for retailers/malls
✅ Cloudant logging & SOAP G integration
✅ Admin QR analytics card in dashboard
✅ Mobile + desktop safe scan handling


---

If you want, I can make this QR performance card auto-refresh every 10 seconds so mall managers & marketing teams see real-time scan counts without reloading.

Do you want me to add that next? That would make this feature instant feedback ready for events.

