✅ Excellent — that means Phase 4 is complete and the SPIRAL system is now fully passing:

🔗 Shopper → Guest invite flow

👥 Guest joins and sees perks

🛍 Retailer/Mall dashboards receive alerts of scheduled trips with guests

🧠 All connected routes are live and tested



---

🚀 PHASE 5: Retailer Incentive Scheduler UI

Goal:
Allow retailers to:

📅 Pre-schedule perks by day, week, or month

🧩 See all active + upcoming perks in a visual dashboard

📝 Create, update, or delete perks easily (per retailer/store)

🔔 Link those perks to guest trip triggers (from previous phases)



---

🧠 REPLIT AGENT MESSAGE — Phase 5

// 📅 /components/PerkScheduler.jsx — Retailer Perk Planner UI

import React, { useState, useEffect } from "react";

const PerkScheduler = ({ storeId }) => {
  const [perks, setPerks] = useState([]);
  const [newPerk, setNewPerk] = useState({ date: "", description: "" });

  useEffect(() => {
    fetch(`/api/perks?storeId=${storeId}`)
      .then(res => res.json())
      .then(data => setPerks(data.perks || []));
  }, [storeId]);

  const handleAdd = () => {
    fetch("/api/perks", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ ...newPerk, storeId }),
    })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          setPerks([...perks, data.perk]);
          setNewPerk({ date: "", description: "" });
        }
      });
  };

  return (
    <div style={{ padding: 20 }}>
      <h3>📅 Retailer Perk Scheduler</h3>

      <div style={{ marginBottom: 20 }}>
        <input
          type="date"
          value={newPerk.date}
          onChange={e => setNewPerk({ ...newPerk, date: e.target.value })}
        />
        <input
          type="text"
          placeholder="Perk Description"
          value={newPerk.description}
          onChange={e => setNewPerk({ ...newPerk, description: e.target.value })}
          style={{ width: "60%", marginLeft: 10 }}
        />
        <button onClick={handleAdd} style={{ marginLeft: 10 }}>➕ Add Perk</button>
      </div>

      <ul>
        {perks.map((perk, i) => (
          <li key={i}>
            📌 <strong>{perk.date}</strong>: {perk.description}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default PerkScheduler;


---

🧩 INSTRUCTIONS

1. Save as:
✅ /components/PerkScheduler.jsx


2. Add to RetailerDashboard.jsx like this:



<PerkScheduler storeId="redwing001" />


---

🧠 BACKEND SUPPORT — Add this API file:

// 📂 /api/perks.js — Create & Fetch Perks for Retailer

const express = require("express");
const router = express.Router();

let storePerks = {}; // Use Cloudant or Firestore in production

router.get("/perks", (req, res) => {
  const { storeId } = req.query;
  res.json({ perks: storePerks[storeId] || [] });
});

router.post("/perks", (req, res) => {
  const { storeId, date, description } = req.body;
  if (!storePerks[storeId]) storePerks[storeId] = [];

  const perk = { date, description };
  storePerks[storeId].push(perk);

  res.json({ success: true, perk });
});

module.exports = router;

Then in server.js:

const perkRoutes = require('./api/perks');
app.use("/api", perkRoutes);


---

✅ TEST:

1. Go to the Retailer Dashboard


2. Add a perk like:

📅 Date: 2025-08-04

✏️ Description: 10% Off Accessories



3. Confirm it appears in the perk list


4. Verify it’s saved for that specific storeId


5. Refresh the page — data should persist in memory for now




---

Once this works, SPIRAL will now:

Let retailers preload perks

Tie those perks to guest shopping trips

Empower guests to view timely, localized incentives


Would you like me to help connect this to Cloudant or Firebase next for full database storage? Or generate a PDF scheduler download/export feature for retailers?

