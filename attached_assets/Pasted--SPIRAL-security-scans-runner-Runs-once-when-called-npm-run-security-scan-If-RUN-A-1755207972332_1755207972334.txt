/**
 * SPIRAL security scans runner
 * - Runs once when called (npm run security:scan)
 * - If RUN_AS_DAEMON=true, schedules every 4 hours via node-cron (Replit fallback)
 *
 * Env:
 *  - API_BASE_URL (e.g., https://spiralshops.com)
 *  - Optional: SNYK_TOKEN (if set, will run snyk test)
 *
 * Outputs reports to ./security-reports/<timestamp>/
 */

const { spawnSync } = require("child_process");
const fs = require("fs");
const path = require("path");
const cron = require("node-cron");

const BASE_URL = process.env.API_BASE_URL || "http://localhost:3000";
const RUN_AS_DAEMON = (process.env.RUN_AS_DAEMON || "false").toLowerCase() === "true";

function sh(cmd, opts = {}) {
  console.log(`\n$ ${cmd}`);
  const res = spawnSync(cmd, { shell: true, stdio: "inherit", ...opts });
  if (res.status !== 0) console.warn(`Command exited with ${res.status}: ${cmd}`);
}

function outDir() {
  const TS = new Date().toISOString().replace(/[:.]/g, "-");
  const d = path.join(process.cwd(), "security-reports", TS);
  fs.mkdirSync(d, { recursive: true });
  return d;
}

function runNpmAudit(dir) {
  try {
    sh(`npm audit --audit-level=high || true`);
    sh(`npm audit --json > ${path.join(dir, "npm-audit.json")} || true`);
  } catch (e) {
    console.warn("npm audit finished with non-zero exit (captured).");
  }
}

function runSnyk(dir) {
  if (!process.env.SNYK_TOKEN) {
    console.log("SNYK_TOKEN not set — skipping Snyk scan.");
    return;
  }
  try {
    sh(`npx snyk test --severity-threshold=high || true`);
    sh(`npx snyk test --json > ${path.join(dir, "snyk.json")} || true`);
  } catch (e) {
    console.warn("Snyk finished with non-zero exit (captured).");
  }
}

function runNewman(dir) {
  const coll = "tests/postman/spiral_api_security.postman_collection.json";
  const env = "tests/postman/envs/prod.postman_environment.json";
  if (!fs.existsSync(coll) || !fs.existsSync(env)) {
    console.log("Postman files not found; skipping Newman. Ensure test files exist.");
    return;
  }
  const outHtml = path.join(dir, "newman.html");
  sh(`npx newman run ${coll} -e ${env} --timeout-request 120000 --reporters cli,htmlextra --reporter-htmlextra-export "${outHtml}" || true`);
}

function runZapRemote(dir) {
  const zapUrl = process.env.ZAP_AUTOMATION_URL; // optional remote ZAP runner URL
  if (!zapUrl) {
    console.log("ZAP_AUTOMATION_URL not set — skipping remote ZAP trigger.");
    return;
  }
  try {
    sh(`curl -sS "${zapUrl}" -o "${path.join(dir, "zap-trigger.json")}" || true`);
  } catch (e) {
    console.warn("ZAP trigger failed (captured).");
  }
}

async function runAll() {
  const dir = outDir();
  console.log("\n==============================================================================");
  console.log(`SPIRAL Security Scans @ ${new Date().toISOString()} (BASE_URL=${BASE_URL})`);
  console.log("==============================================================================\n");
  runNpmAudit(dir);
  runSnyk(dir);
  runNewman(dir);
  runZapRemote(dir);
  console.log(`Reports saved to: ${dir}`);
}

(async () => {
  await runAll();
  if (RUN_AS_DAEMON) {
    console.log("Daemon mode on — scheduling every 4 hours.");
    cron.schedule("0 */4 * * *", async () => {
      try { await runAll(); } catch (e) { console.error(e); }
    });
  }
})();