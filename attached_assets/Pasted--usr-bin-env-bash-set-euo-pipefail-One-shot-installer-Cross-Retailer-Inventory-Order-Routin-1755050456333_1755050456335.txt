#!/usr/bin/env bash
set -euo pipefail

# One-shot installer: Cross-Retailer Inventory + Order Routing + Roadmap tracker

mkdir -p server public/admin data

# ─────────────────────────────────────────────────────────────
# package.json (ESM + express)
# ─────────────────────────────────────────────────────────────
if [ ! -f package.json ]; then
  cat > package.json << 'EOF'
{
  "name": "spiralshops",
  "version": "1.1.0",
  "type": "module",
  "private": true,
  "scripts": {
    "start": "node server/index.js",
    "dev": "node server/index.js"
  },
  "dependencies": {
    "express": "^4.19.2"
  }
}
EOF
fi

# ─────────────────────────────────────────────────────────────
# Data seeds (safe defaults)
# ─────────────────────────────────────────────────────────────
cat > data/retailers.json << 'EOF'
[
  {
    "id": "ret-001",
    "name": "Main Street Outfitters",
    "zip": "55101",
    "lat": 44.9477,
    "lng": -93.0936,
    "allow_partner_fulfillment": true
  },
  {
    "id": "ret-002",
    "name": "City Mall Electronics",
    "zip": "55415",
    "lat": 44.9730,
    "lng": -93.2570,
    "allow_partner_fulfillment": true
  },
  {
    "id": "ret-003",
    "name": "Neighborhood Books",
    "zip": "55104",
    "lat": 44.9536,
    "lng": -93.1590,
    "allow_partner_fulfillment": false
  }
]
EOF

cat > data/inventory.json << 'EOF'
[
  { "retailer_id": "ret-001", "sku": "SKU-RED-TSHIRT-XL", "title": "Red Tee XL", "qty": 6, "price": 19.99 },
  { "retailer_id": "ret-001", "sku": "SKU-HEADPHONES-01", "title": "Wireless Headphones", "qty": 2, "price": 69.00 },
  { "retailer_id": "ret-002", "sku": "SKU-HEADPHONES-01", "title": "Wireless Headphones", "qty": 9, "price": 65.00 },
  { "retailer_id": "ret-003", "sku": "SKU-RED-TSHIRT-XL", "title": "Red Tee XL", "qty": 3, "price": 21.50 }
]
EOF

cat > data/roadmap.json << 'EOF'
{
  "phase": "Phase 1 — Competitive Gap Closing",
  "items": [
    { "id": "cross_inventory", "title": "Cross-Retailer Inventory Referencing (API + UI)", "status": "in_progress" },
    { "id": "analytics_hub", "title": "Retailer Analytics & Intelligence Hub (MVP)", "status": "todo" },
    { "id": "local_fulfillment", "title": "Local Fulfillment Layer (courier integrations + returns desk)", "status": "todo" }
  ],
  "last_updated": ""
}
EOF

# ─────────────────────────────────────────────────────────────
# Server: hardening middleware (reused)
# ─────────────────────────────────────────────────────────────
cat > server/app-hardening.js << 'EOF'
export function attachHardening(app) {
  app.get("/api/health", (req, res) => {
    res.set("Cache-Control", "no-store");
    res.json({ status: "ok", service: "spiralshops", version: "1.1.0" });
  });

  app.use((req, res, next) => {
    res.setHeader("Strict-Transport-Security","max-age=31536000; includeSubDomains; preload");
    res.setHeader("X-Content-Type-Options","nosniff");
    res.setHeader("Referrer-Policy","strict-origin-when-cross-origin");
    res.setHeader("Content-Security-Policy",
      [
        "default-src 'self' https: data:",
        "script-src 'self' https: 'unsafe-inline' 'unsafe-eval'",
        "style-src 'self' https: 'unsafe-inline'",
        "img-src 'self' https: data:",
        "font-src 'self' https: data:",
        "connect-src 'self' https:",
        "frame-ancestors 'self'",
        "base-uri 'self'"
      ].join("; ")
    );
    if (req.path.startsWith("/investors")) {
      res.setHeader("X-Robots-Tag","noindex, nofollow");
    }
    next();
  });
}
EOF

# ─────────────────────────────────────────────────────────────
# Server: inventory + routing + roadmap APIs
# ─────────────────────────────────────────────────────────────
cat > server/inventory.js << 'EOF'
import fs from "fs";
import path from "path";

const dataDir = path.join(process.cwd(), "data");
const invPath = path.join(dataDir, "inventory.json");
const retPath = path.join(dataDir, "retailers.json");
const roadmapPath = path.join(dataDir, "roadmap.json");

function loadJSON(p){ return JSON.parse(fs.readFileSync(p, "utf-8")); }
function saveJSON(p, obj){ fs.writeFileSync(p, JSON.stringify(obj, null, 2)); }

export function haversineKm(a, b) {
  const R = 6371;
  const toRad = d => d * Math.PI / 180;
  const dLat = toRad(b.lat - a.lat);
  const dLng = toRad(b.lng - a.lng);
  const lat1 = toRad(a.lat);
  const lat2 = toRad(b.lat);
  const h = Math.sin(dLat/2)**2 + Math.cos(lat1)*Math.cos(lat2)*Math.sin(dLng/2)**2;
  return 2 * R * Math.asin(Math.sqrt(h));
}

export function attachInventoryRoutes(app){
  app.get("/api/retailers", (req,res)=>{
    res.json(loadJSON(retPath));
  });

  app.put("/api/retailers/:id/settings", (req,res)=>{
    const { id } = req.params;
    let retailers = loadJSON(retPath);
    const idx = retailers.findIndex(r => r.id === id);
    if (idx === -1) return res.status(404).json({error:"retailer_not_found"});
    const { allow_partner_fulfillment } = req.query.allow_partner_fulfillment ? { allow_partner_fulfillment: req.query.allow_partner_fulfillment === "true" } : (req.body||{});
    retailers[idx].allow_partner_fulfillment = !!allow_partner_fulfillment;
    saveJSON(retPath, retailers);
    res.json(retailers[idx]);
  });

  // Bulk upload inventory for a retailer
  app.post("/api/inventory/bulk", expressJson, (req,res)=>{
    const { retailer_id, items } = req.body || {};
    if (!retailer_id || !Array.isArray(items)) return res.status(400).json({error:"invalid_payload"});
    const retailers = loadJSON(retPath);
    if (!retailers.find(r=>r.id===retailer_id)) return res.status(404).json({error:"retailer_not_found"});
    let inv = loadJSON(invPath);
    // remove existing entries for retailer for uploaded SKUs to replace cleanly
    const uploadSkus = new Set(items.map(i=>i.sku));
    inv = inv.filter(i => !(i.retailer_id===retailer_id && uploadSkus.has(i.sku)));
    for (const it of items){
      inv.push({ retailer_id, sku: it.sku, title: it.title || it.sku, qty: Math.max(0, Number(it.qty||0)), price: Number(it.price||0) });
    }
    saveJSON(invPath, inv);
    res.json({ok:true, count: items.length});
  });

  // Query availability for a SKU near a lat/lng within optional radius_km
  app.get("/api/inventory/availability", (req,res)=>{
    const { sku, lat, lng, radius_km } = req.query;
    if (!sku) return res.status(400).json({error:"sku_required"});
    const inv = loadJSON(invPath);
    const retailers = loadJSON(retPath);
    const matches = inv.filter(i => i.sku === sku && i.qty > 0).map(i=>{
      const r = retailers.find(r=>r.id===i.retailer_id);
      if (!r) return null;
      let distance_km = null;
      if (lat && lng) {
        distance_km = haversineKm({lat:Number(lat),lng:Number(lng)}, {lat:r.lat,lng:r.lng});
      }
      return {
        retailer_id: i.retailer_id,
        retailer_name: r?.name || i.retailer_id,
        allow_partner_fulfillment: !!r?.allow_partner_fulfillment,
        sku: i.sku,
        title: i.title,
        qty: i.qty,
        price: i.price,
        distance_km
      };
    }).filter(Boolean);
    let results = matches;
    if (radius_km && lat && lng) {
      const maxR = Number(radius_km);
      results = results.filter(m => m.distance_km !== null && m.distance_km <= maxR);
    }
    results.sort((a,b)=>{
      const da = a.distance_km ?? 9e9, db = b.distance_km ?? 9e9;
      if (da!==db) return da-db;
      return (b.qty||0) - (a.qty||0);
    });
    res.json(results);
  });

  // Reserve qty of a SKU for an order at a specific retailer
  app.post("/api/inventory/reserve", expressJson, (req,res)=>{
    const { retailer_id, sku, qty } = req.body || {};
    if (!retailer_id || !sku || !qty) return res.status(400).json({error:"invalid_payload"});
    let inv = loadJSON(invPath);
    const idx = inv.findIndex(i => i.retailer_id===retailer_id && i.sku===sku);
    if (idx === -1) return res.status(404).json({error:"not_found"});
    if (inv[idx].qty < qty) return res.status(409).json({error:"insufficient_qty", available: inv[idx].qty});
    inv[idx].qty -= qty;
    saveJSON(invPath, inv);
    res.json({ok:true, reserved: qty});
  });

  // Order routing: choose best retailer for a SKU based on proximity, qty, partner settings
  app.post("/api/orders/route", expressJson, (req,res)=>{
    const { sku, qty=1, shopper_lat, shopper_lng, preferred_retailer_id } = req.body || {};
    if (!sku || !shopper_lat || !shopper_lng) return res.status(400).json({error:"sku_and_shopper_location_required"});
    const retailers = loadJSON(retPath);
    const inv = loadJSON(invPath).filter(i => i.sku===sku && i.qty >= qty);
    let candidates = inv.map(i=>{
      const r = retailers.find(x=>x.id===i.retailer_id);
      if (!r) return null;
      const dist = haversineKm({lat:Number(shopper_lat),lng:Number(shopper_lng)}, {lat:r.lat,lng:r.lng});
      return { retailer: r, item: i, distance_km: dist };
    }).filter(Boolean);

    // Respect settings: a store that disallows partner fulfillment can still fulfill its own orders,
    // but won't be selected to fulfill *other* stores' orders unless allowed.
    if (preferred_retailer_id) {
      const self = candidates.find(c => c.retailer.id===preferred_retailer_id);
      if (self) return res.json({ choice: self, reason: "preferred_retailer_has_stock" });
    }
    candidates = candidates.filter(c => c.retailer.allow_partner_fulfillment);

    candidates.sort((a,b)=>{
      if (a.distance_km !== b.distance_km) return a.distance_km - b.distance_km;
      return (b.item.qty||0) - (a.item.qty||0);
    });
    if (!candidates.length) return res.status(404).json({error:"no_eligible_retailer_found"});
    res.json({ choice: candidates[0], alternatives: candidates.slice(1,4) });
  });

  // Roadmap tracker (GET/PUT)
  app.get("/api/roadmap", (_req,res)=>{
    const data = loadJSON(roadmapPath);
    data.last_updated = new Date().toISOString();
    res.json(data);
  });

  app.put("/api/roadmap", expressJson, (req,res)=>{
    const data = loadJSON(roadmapPath);
    const updates = req.body || {};
    if (Array.isArray(updates.items)) data.items = updates.items;
    data.last_updated = new Date().toISOString();
    saveJSON(roadmapPath, data);
    res.json(data);
  });
}

// tiny JSON body parser (no extra deps)
function expressJson(req,res,next){
  if (req.headers["content-type"] && req.headers["content-type"].includes("application/json")){
    let body=""; req.on("data",ch=>body+=ch);
    req.on("end",()=>{ try{ req.body = body?JSON.parse(body):{}; }catch(e){ return res.status(400).json({error:"bad_json"});} next(); });
  } else { req.body={}; next(); }
}
EOF

# ─────────────────────────────────────────────────────────────
# Server: index (wires everything, serves admin UI)
# ─────────────────────────────────────────────────────────────
cat > server/index.js << 'EOF'
import express from "express";
import path from "path";
import { fileURLToPath } from "url";
import { attachHardening } from "./app-hardening.js";
import { attachInventoryRoutes } from "./inventory.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const app = express();

attachHardening(app);
attachInventoryRoutes(app);

const publicDir = path.join(__dirname, "..", "public");
app.use(express.static(publicDir, { index: false }));

// Admin inventory viewer
app.get("/admin/inventory", (_req,res)=>{
  res.sendFile(path.join(publicDir, "admin", "inventory.html"));
});

// Fallback home (basic)
app.get("*", (_req,res)=>{
  res.send(`<!doctype html><meta charset="utf-8"><title>SPIRAL</title>
  <style>body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial;margin:40px;color:#0b1220}</style>
  <h1>SPIRAL — Cross-Retailer Inventory Enabled</h1>
  <p>APIs are live. Try:</p>
  <ul>
    <li><code>/api/health</code></li>
    <li><code>/api/retailers</code></li>
    <li><code>/api/inventory/availability?sku=SKU-HEADPHONES-01&lat=44.98&lng=-93.27&radius_km=30</code></li>
    <li><code>/api/orders/route</code> (POST JSON)</li>
    <li><a href="/admin/inventory">/admin/inventory</a> (search & settings)</li>
    <li><code>/api/roadmap</code> (live tracker)</li>
  </ul>`);
});

const port = process.env.PORT || 3000;
app.listen(port, ()=> console.log(`SPIRAL server running on :${port}`));
EOF

# ─────────────────────────────────────────────────────────────
# Admin UI: simple SKU search + retailer settings + roadmap
# ─────────────────────────────────────────────────────────────
cat > public/admin/inventory.html << 'EOF'
<!doctype html>
<html lang="en">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>SPIRAL Admin — Cross Inventory</title>
<style>
body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial;margin:24px;color:#0b1220}
h1{margin:.2rem 0 1rem}
.card{border:1px solid #e5e7eb;border-radius:14px;padding:16px;margin:10px 0}
.row{display:flex;gap:8px;flex-wrap:wrap;align-items:center}
input,select,button{padding:10px;border:1px solid #d1d5db;border-radius:12px}
table{width:100%;border-collapse:collapse;margin-top:12px}
th,td{border-bottom:1px solid #e5e7eb;padding:8px;text-align:left}
.small{color:#6b7280;font-size:.92rem}
.badge{background:#f3f4f6;border-radius:999px;padding:4px 8px}
</style>
<h1>SPIRAL — Cross-Retailer Inventory</h1>

<div class="card">
  <h3>Find Availability</h3>
  <div class="row">
    <input id="sku" placeholder="SKU e.g. SKU-HEADPHONES-01">
    <input id="lat" placeholder="Lat e.g. 44.98">
    <input id="lng" placeholder="Lng e.g. -93.27">
    <input id="radius" placeholder="Radius KM e.g. 30">
    <button onclick="search()">Search</button>
  </div>
  <table id="results"><thead><tr>
    <th>Retailer</th><th>SKU</th><th>Title</th><th>Qty</th><th>Price</th><th>Distance (km)</th><th>Partner?</th>
  </tr></thead><tbody></tbody></table>
</div>

<div class="card">
  <h3>Retailer Settings</h3>
  <div class="row">
    <select id="retSel"></select>
    <select id="allowSel">
      <option value="true">Allow partner fulfillment</option>
      <option value="false">Do NOT allow partner fulfillment</option>
    </select>
    <button onclick="saveSettings()">Save</button>
  </div>
  <div class="small">This controls whether a store can be selected to fulfill other stores' orders.</div>
</div>

<div class="card">
  <h3>Roadmap Tracker</h3>
  <div class="row">
    <button onclick="loadRoadmap()">Refresh</button>
    <span id="updated" class="badge"></span>
  </div>
  <table id="roadmap"><thead><tr><th>ID</th><th>Item</th><th>Status</th></tr></thead><tbody></tbody></table>
</div>

<script>
async function search(){
  const sku = document.getElementById('sku').value.trim();
  const lat = document.getElementById('lat').value.trim();
  const lng = document.getElementById('lng').value.trim();
  const radius = document.getElementById('radius').value.trim();
  const qs = new URLSearchParams({ sku, lat, lng, radius_km: radius }).toString();
  const r = await fetch('/api/inventory/availability?'+qs);
  const data = await r.json();
  const tb = document.querySelector('#results tbody'); tb.innerHTML='';
  (data||[]).forEach(d=>{
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${d.retailer_name}</td>
      <td>${d.sku}</td>
      <td>${d.title}</td>
      <td>${d.qty}</td>
      <td>$${Number(d.price||0).toFixed(2)}</td>
      <td>${d.distance_km==null?'—':d.distance_km.toFixed(1)}</td>
      <td>${d.allow_partner_fulfillment? 'Yes':'No'}</td>`;
    tb.appendChild(tr);
  });
}

async function loadRetailers(){
  const r = await fetch('/api/retailers'); const data = await r.json();
  const sel = document.getElementById('retSel'); sel.innerHTML='';
  data.forEach(x=>{
    const opt = document.createElement('option');
    opt.value = x.id; opt.textContent = `${x.name} (${x.id})`;
    opt.dataset.allow = x.allow_partner_fulfillment ? 'true':'false';
    sel.appendChild(opt);
  });
  updateAllowFromSelection();
}
function updateAllowFromSelection(){
  const sel = document.getElementById('retSel');
  const allowSel = document.getElementById('allowSel');
  const opt = sel.options[sel.selectedIndex];
  if (opt) allowSel.value = opt.dataset.allow || 'true';
}
document.getElementById('retSel').addEventListener('change', updateAllowFromSelection);

async function saveSettings(){
  const id = document.getElementById('retSel').value;
  const allow = document.getElementById('allowSel').value;
  const r = await fetch(`/api/retailers/${id}/settings?allow_partner_fulfillment=${allow}`, { method:'PUT' });
  if (r.ok){ alert('Saved'); loadRetailers(); } else { alert('Error'); }
}

async function loadRoadmap(){
  const r = await fetch('/api/roadmap'); const data = await r.json();
  const tb = document.querySelector('#roadmap tbody'); tb.innerHTML='';
  (data.items||[]).forEach(it=>{
    const tr = document.createElement('tr');
    tr.innerHTML = `<td>${it.id}</td><td>${it.title}</td><td>${it.status}</td>`;
    tb.appendChild(tr);
  });
  document.getElementById('updated').textContent = 'Updated: ' + (data.last_updated||'');
}

loadRetailers();
loadRoadmap();
</script>
EOF

# ─────────────────────────────────────────────────────────────
# Install dependencies
# ─────────────────────────────────────────────────────────────
npm install

echo "✅ Cross-Retailer Inventory + Routing + Roadmap installed.

Start the server:
  npm start

Try these:
  GET  /api/health
  GET  /api/retailers
  GET  /api/inventory/availability?sku=SKU-HEADPHONES-01&lat=44.98&lng=-93.27&radius_km=30
  POST /api/orders/route  (body: {\"sku\":\"SKU-HEADPHONES-01\",\"qty\":1,\"shopper_lat\":44.98,\"shopper_lng\":-93.27})
  PUT  /api/retailers/ret-003/settings?allow_partner_fulfillment=true
  GET  /api/roadmap
  UI   /admin/inventory

Next up (Phase 1):
  - Analytics & Intelligence Hub (MVP)
  - Local Fulfillment Layer
"