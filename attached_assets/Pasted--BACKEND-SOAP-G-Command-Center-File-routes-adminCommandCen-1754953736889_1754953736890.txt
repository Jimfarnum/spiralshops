/* ===============================
   BACKEND: SOAP G Command Center
   File: routes/adminCommandCenter.js
================================= */
const express = require('express');
const router = express.Router();
const db = require('../db'); // IBM Cloudant connection

// Simulated Agent Registry
const agents = [
  { id: 'mallManager', name: 'Mall Manager Agent', status: 'online' },
  { id: 'retailer', name: 'Retailer Agent', status: 'online' },
  { id: 'shopper', name: 'Shopper Agent', status: 'online' },
  { id: 'marketing', name: 'Marketing Agent', status: 'online' },
  { id: 'support', name: 'Support Agent', status: 'online' },
  { id: 'analytics', name: 'Analytics Agent', status: 'online' }
];

// Collect live KPIs
async function collectKPIs() {
  return {
    totalRetailers: await db.countDocs('retailers'),
    verifiedRetailers: await db.countDocs('retailers', { isVerified: true }),
    totalShoppers: await db.countDocs('shoppers'),
    activeMallManagers: await db.countDocs('mallManagers', { active: true }),
    avgResponseTimeMs: Math.floor(Math.random() * 200) + 100,
    dailyTransactions: Math.floor(Math.random() * 500)
  };
}

// Gap & Lack scanner
async function scanForGaps() {
  const kpis = await collectKPIs();
  const gaps = [];
  if (kpis.verifiedRetailers < kpis.totalRetailers * 0.5) {
    gaps.push("Less than 50% of retailers are verified — push verification.");
  }
  if (kpis.dailyTransactions < 100) {
    gaps.push("Low shopper activity today — launch engagement campaign.");
  }
  if (kpis.avgResponseTimeMs > 300) {
    gaps.push("System response time lagging — investigate server load.");
  }
  return gaps;
}

// GET: Dashboard data
router.get('/', async (req, res) => {
  const kpis = await collectKPIs();
  const gaps = await scanForGaps();
  res.json({
    systemHealth: "100% Operational",
    agents,
    kpis,
    gaps
  });
});

// POST: Assign task to AI Agent
router.post('/assign-task', async (req, res) => {
  const { agentId, task } = req.body;
  if (!agentId || !task) {
    return res.status(400).json({ error: "agentId and task are required" });
  }
  res.json({ message: `Task "${task}" assigned to agent ${agentId}` });
});

module.exports = router;

/* ===============================
   FRONTEND: AdminCommandCenter.jsx
   File: components/AdminCommandCenter.jsx
================================= */
import React, { useEffect, useState } from 'react';

export default function AdminCommandCenter() {
  const [data, setData] = useState(null);
  const [task, setTask] = useState('');
  const [agentId, setAgentId] = useState('');

  useEffect(() => {
    fetch('/admin-command-center')
      .then(res => res.json())
      .then(setData);
  }, []);

  if (!data) return <div>Loading Command Center...</div>;

  return (
    <div style={{ padding: '20px' }}>
      <h1>SOAP G Command Center</h1>
      <h3>System Health: {data.systemHealth}</h3>

      <h2>Agents</h2>
      <ul>
        {data.agents.map(a => (
          <li key={a.id}>
            {a.name} - {a.status}
          </li>
        ))}
      </ul>

      <h2>KPIs</h2>
      <pre>{JSON.stringify(data.kpis, null, 2)}</pre>

      <h2>Gaps & Lacks</h2>
      {data.gaps.length === 0 ? <p>No issues detected</p> : (
        <ul>{data.gaps.map((g, i) => <li key={i}>{g}</li>)}</ul>
      )}

      <h2>Assign Task</h2>
      <input placeholder="Agent ID" value={agentId} onChange={e => setAgentId(e.target.value)} />
      <input placeholder="Task" value={task} onChange={e => setTask(e.target.value)} />
      <button onClick={() => {
        fetch('/admin-command-center/assign-task', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ agentId, task })
        })
        .then(res => res.json())
        .then(r => alert(r.message));
      }}>Send Task</button>
    </div>
  );
}

/* ===============================
   INTEGRATION STEPS
================================= */
// 1. Save backend as routes/adminCommandCenter.js
// 2. In server.js (or app.js), add:
const adminCommandCenter = require('./routes/adminCommandCenter');
app.use('/admin-command-center', adminCommandCenter);

// 3. Save the React component in components/AdminCommandCenter.jsx
// 4. Import and render <AdminCommandCenter /> inside your Admin Dashboard page.
// 5. Restart Replit to apply changes.