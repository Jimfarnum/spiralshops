// âœ… SPIRAL Feature 11: Return & Refund System â€“ FULL IMPLEMENTATION REQUEST

// ðŸŽ¯ OVERVIEW:
// Implement a complete, secure, and user-friendly return & refund system for SPIRAL,
// supporting original payment and SPIRAL credit refunds with admin and customer workflows.

// âœ… CUSTOMER SIDE â€“ /orders/returns
// - View past orders with eligible return window
// - Select product(s) to return with reason
// - Upload optional photo (damaged, incorrect item, etc.)
// - Choose refund method: "Original Payment" or "SPIRAL Credit"
// - View live status updates (Pending, Approved, Rejected, Refunded)


// âœ… RETAILER / ADMIN DASHBOARD â€“ /admin/returns
// - View and filter return requests (All, Pending, Approved, Rejected, Refunded)
// - Review reason, date, photo, refund preference
// - Approve or reject requests with optional retailer/admin notes
// - Initiate refund (Stripe or SPIRAL Points) securely
// - Return activity and resolution audit trail

// âœ… RULES ENGINE (Return Moderation Logic)
// - Auto-approve low-risk returns: under $100, within 30 days, no prior abuse
// - Flag high-risk or repeat behavior for manual review
// - Return request is locked if already processed or flagged

// âœ… DATABASE SCHEMA (PostgreSQL-Compatible)

CREATE TABLE return_requests (
  id SERIAL PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  order_id UUID REFERENCES orders(id),
  product_id UUID REFERENCES products(id),
  reason TEXT NOT NULL,
  refund_type TEXT CHECK (refund_type IN ('original', 'spiral_credit')),
  status TEXT CHECK (status IN ('pending', 'approved', 'rejected', 'refunded')) DEFAULT 'pending',
  image_url TEXT,
  submitted_at TIMESTAMP DEFAULT now(),
  decision_at TIMESTAMP,
  decision_note TEXT,
  auto_approved BOOLEAN DEFAULT false
);

CREATE TABLE refund_transactions (
  id SERIAL PRIMARY KEY,
  return_id INTEGER REFERENCES return_requests(id),
  user_id UUID,
  method TEXT CHECK (method IN ('stripe', 'spiral_credit')),
  amount DECIMAL,
  status TEXT CHECK (status IN ('processing', 'completed', 'failed')) DEFAULT 'processing',
  created_at TIMESTAMP DEFAULT now()
);

// âœ… API ROUTES

// POST /api/returns/request         â†’ Submit return request
// GET  /api/returns/status          â†’ Get user return history/status
// POST /api/returns/admin/review    â†’ Approve/reject a return
// POST /api/returns/refund          â†’ Trigger refund logic (Stripe or SPIRAL Points)

// âœ… UI/UX DETAILS

// /orders/returns:
// - Form UI: order dropdown, product selector, reason entry, refund type, upload photo
// - Status badges: color-coded for each status
// - Mobile-friendly accordion layout for each return item

// /admin/returns:
// - Filtered tabs: All / Pending / Approved / Rejected / Refunded
// - Modal or drawer view to approve/reject
// - One-click refund processing with real-time status change
// - Notes/comments retained in return history

// âœ… BACKEND LOGIC

// - Stripe refund uses existing Stripe API credentials
// - SPIRAL credit refund logic adds points to user account and logs to loyalty ledger
// - Validate product-order-user match for return eligibility
// - Ensure no duplicate return for same item
// - Hook all actions into audit log

// âœ… TEST PLAN

// 1. Create test order, initiate return via /orders/returns
// 2. Submit image and note, choose refund type
// 3. Admin accesses /admin/returns, approves with comment
// 4. Refund triggers â€“ Stripe refund or SPIRAL points show in dashboard
// 5. Test auto-approve (low-value, eligible order)
// 6. Confirm backend routes function via Postman or UI tests
// 7. Verify mobile responsiveness on Android & iOS

// âœ… INTEGRATION & DEPLOYMENT NOTES

// - PostgreSQL schema designed for IBM Cloud database
// - Backend routes secured with JWT
// - Stripe integration production-ready
// - Monitor returns and refunds via Vercel server logs + Cloudant activity logs if linked
// - Use mock data for demo environment testing

// âœ… READY TO IMPLEMENT & TEST
// Please proceed with implementation, confirm route status and front-end functionality.
// Once complete, Iâ€™ll provide Feature 12: AI Smart Recommendations + Personalized Search.