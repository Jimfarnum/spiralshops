// agents/techwatch/gh_commenter.js
/**
 * GitHub KPI Commenter
 * - Reads latest KPI results
 * - Correlates to INITIATE status files with ticket URLs
 * - Posts a KPI summary comment to each GitHub Issue
 */

const fs = require("fs");
const path = require("path");

const STATUS_DIR = path.join(process.cwd(), "agents", "techwatch", "status");
const RESULTS_DIR = path.join(process.cwd(), "agents", "techwatch", "kpi_results");

function latestResultsDir() {
  const dates = fs.readdirSync(RESULTS_DIR).filter(d => /^\d{4}-\d{2}-\d{2}$/.test(d)).sort();
  if (!dates.length) throw new Error("No KPI results found");
  return path.join(RESULTS_DIR, dates[dates.length - 1]);
}
function loadResults(dir) {
  const p = path.join(dir, "results.json");
  return JSON.parse(fs.readFileSync(p, "utf8")).results || [];
}
function loadStatuses() {
  if (!fs.existsSync(STATUS_DIR)) return [];
  return fs.readdirSync(STATUS_DIR)
    .filter(f => f.endsWith(".json"))
    .map(f => JSON.parse(fs.readFileSync(path.join(STATUS_DIR, f), "utf8")));
}
function issueFromUrl(url) {
  // https://github.com/org/repo/issues/123
  const m = /github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/.exec(url || "");
  return m ? Number(m[1]) : null;
}

async function postComment(issueNumber, body) {
  const token = process.env.GITHUB_TOKEN;
  const repo  = process.env.GITHUB_REPO;
  if (!token || !repo) throw new Error("Missing GITHUB_TOKEN or GITHUB_REPO");
  const res = await fetch(`https://api.github.com/repos/${repo}/issues/${issueNumber}/comments`, {
    method: "POST",
    headers: {
      "authorization": `Bearer ${token}`,
      "accept": "application/vnd.github+json",
      "content-type": "application/json"
    },
    body: JSON.stringify({ body })
  });
  if (!res.ok) {
    const t = await res.text();
    throw new Error(`Comment failed: ${res.status} ${t}`);
  }
  return await res.json();
}

function fmtMetric(m) {
  const name = m.metric.replace(/_/g, " ");
  return `• **${name}**: ${m.before_pretty} → ${m.after_pretty} (${m.delta_pretty})`;
}

(async () => {
  try {
    const latest = latestResultsDir();
    const kpis = loadResults(latest);
    const statuses = loadStatuses();

    let posted = 0;
    for (const s of statuses) {
      if (!s.ticket || s.platform !== "github") continue;
      const num = issueFromUrl(s.ticket);
      if (!num) continue;

      // match by title; you can tighten with URL if needed
      const rec = kpis.find(r => r.title === s.title);
      if (!rec) continue;

      const lines = [
        `**KPI Update for:** _${rec.title}_`,
        ``,
        ...rec.metrics.map(fmtMetric),
        ``,
        `_Auto-posted by TechWatch KPI job • ${new Date().toISOString()}_`
      ];
      const body = lines.join("\n");
      await postComment(num, body);
      posted++;
    }

    console.log(`KPI comments posted: ${posted}`);
  } catch (e) {
    console.error("KPI commenter error:", e.message);
    process.exit(1);
  }
})();