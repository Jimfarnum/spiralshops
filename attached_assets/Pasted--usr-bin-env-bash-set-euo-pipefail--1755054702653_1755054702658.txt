#!/usr/bin/env bash
set -euo pipefail

# ─────────────────────────────────────────────────────────────
# SPIRAL Feature #8 — Final Fixups + Admin Token Auth + Ops Summary
# - Protects /admin/* and write APIs with ADMIN_TOKEN
# - Confirms rate limits & quote cache mounted early
# - Adds retailer_zip to availability (if missing)
# - Adds /api/ops/summary rollup
# - Home links to all key pages
# ─────────────────────────────────────────────────────────────

mkdir -p server public

# ---------- Admin token auth middleware ----------
cat > server/admin_auth.js << 'EOF'
export function adminAuth(req, res, next){
  const token = process.env.ADMIN_TOKEN || "";
  if (!token) return res.status(500).json({ error:"admin_token_not_set", hint:"Set ADMIN_TOKEN env var" });
  // Accept via header or query param for convenience
  const h = req.headers["x-admin-token"];
  const q = req.query && req.query.admin_token;
  if (h === token || q === token) return next();
  res.status(401).json({ error:"unauthorized", how:"Send X-Admin-Token header or ?admin_token=..." });
}
EOF

# ---------- Ensure rate limit helper exists ----------
if [ ! -f server/rate_limit.js ]; then
cat > server/rate_limit.js << 'EOF'
const buckets = new Map();
export function createRateLimit(maxPerWindow=60, windowMs=60000){
  return function rateLimit(req,res,next){
    const ip = req.headers['x-forwarded-for']?.split(',')[0]?.trim() || req.socket.remoteAddress || 'unknown';
    const key = `${req.path}:${ip}`;
    const now = Date.now();
    const b = buckets.get(key);
    if (!b || b.reset <= now){
      buckets.set(key, { count:1, reset:now+windowMs });
      res.setHeader('X-RateLimit-Limit', String(maxPerWindow));
      res.setHeader('X-RateLimit-Remaining', String(maxPerWindow-1));
      return next();
    }
    if (b.count >= maxPerWindow){
      const retry = Math.max(0, Math.ceil((b.reset - now)/1000));
      res.setHeader('Retry-After', String(retry));
      return res.status(429).json({ error:"rate_limited", retry_after_seconds:retry });
    }
    b.count++;
    res.setHeader('X-RateLimit-Limit', String(maxPerWindow));
    res.setHeader('X-RateLimit-Remaining', String(Math.max(0, maxPerWindow-b.count)));
    next();
  };
}
EOF
fi

# ---------- Add/patch ops summary ----------
cat > server/ops_summary.js << 'EOF'
import { ds } from "./datastore.js";

export async function getOpsSummary(){
  // Basic health rollup across modules (best-effort)
  const [retailers, inventory, service, pickups, couriers, returns, events] = await Promise.all([
    ds.getRetailers?.() ?? [],
    ds.getInventory?.() ?? [],
    ds.getService?.() ?? { serviceable_zips:[] },
    ds.getPickups?.() ?? [],
    ds.getCouriers?.() ?? [],
    ds.getReturns?.() ?? [],
    ds.getEvents?.() ?? []
  ]);

  return {
    datastore_mode: ds.mode || "json",
    retailers: (retailers||[]).length,
    skus: new Set((inventory||[]).map(i=>i.sku)).size,
    serviceable_zips: (service.serviceable_zips||[]).length,
    pickup_centers: (pickups||[]).length,
    couriers: (couriers||[]).length,
    open_returns: (returns||[]).filter(r=>r.status!=="closed").length,
    analytics_events: (events||[]).length,
    updated_at: new Date().toISOString()
  };
}
EOF

# ---------- Patch server/index.js ----------
if [ -f server/index.js ]; then
  # Imports
  grep -q "createRateLimit" server/index.js || sed -i '1i import { createRateLimit } from "./rate_limit.js";' server/index.js
  grep -q "adminAuth" server/index.js || sed -i '1i import { adminAuth } from "./admin_auth.js";' server/index.js
  grep -q "getOpsSummary" server/index.js || sed -i '1i import { getOpsSummary } from "./ops_summary.js";' server/index.js

  # Ensure publicDir defined early
  grep -q "const publicDir" server/index.js || \
    sed -i 's#const app = express();#const app = express();\nconst publicDir = path.join(__dirname, "..", "public");#' server/index.js

  # Mount rate limits BEFORE feature routes
  grep -q "/api/inventory/availability\", rl" server/index.js || \
    sed -i 's#attachHardening(app);#attachHardening(app);\n\n// Rate limits (anti-scrape)\nconst rl60 = createRateLimit(60, 60*1000);\nconst rl30 = createRateLimit(30, 60*1000);\napp.use("/api/inventory/availability", rl60);\napp.use("/api/fulfillment/quote", rl60);\napp.use("/api/orders/route", rl30);\n#' server/index.js

  # Protect admin pages and admin-like endpoints
  # (Keep GET analytics public; protect POST/PUT that change state)
  # Fulfillment admin endpoints
  sed -i 's#app.post("/api/fulfillment/pickup-centers"#app.post("/api/fulfillment/pickup-centers", adminAuth,#' server/index.js
  sed -i 's#app.put("/api/fulfillment/serviceability"#app.put("/api/fulfillment/serviceability", adminAuth,#' server/index.js
  sed -i 's#app.put("/api/fulfillment/couriers"#app.put("/api/fulfillment/couriers", adminAuth,#' server/index.js
  # Inventory bulk upload & retailer settings if those routes exist (best-effort)
  sed -i 's#app.post("/api/inventory/bulk"#app.post("/api/inventory/bulk", adminAuth,#' server/index.js || true
  sed -i 's#app.put("/api/retailers/\\:id/settings"#app.put("/api/retailers/:id/settings", adminAuth,#' server/index.js || true

  # Gate /admin/* pages via token check (serve if token correct, else 401 JSON)
  if ! grep -q 'app.get("/admin/' server/index.js; then
    # no explicit admin routes detected here; skip
    :
  fi
  # lightweight guard in front of static admin pages
  grep -q "adminGuard" server/index.js || \
  sed -i 's#app.use(express.static(publicDir, { index: false }));#\n// Guard /admin pages\nfunction adminGuard(req,res,next){ if (!req.path.startsWith("/admin")) return next(); const t=req.headers["x-admin-token"]||req.query.admin_token; if(!process.env.ADMIN_TOKEN){ return res.status(500).send("ADMIN_TOKEN not set"); } if(t===process.env.ADMIN_TOKEN) return next(); return res.status(401).send("Unauthorized — supply X-Admin-Token or ?admin_token="); }\napp.use(adminGuard);\n\napp.use(express.static(publicDir, { index: false }));#' server/index.js

  # Add ops summary endpoint if missing
  grep -q "/api/ops/summary" server/index.js || \
    sed -i 's#app.use(express.static(publicDir, { index: false }));#app.use(express.static(publicDir, { index: false }));\n\napp.get("/api/ops/summary", async (_req,res)=>{ res.json(await getOpsSummary()); });#' server/index.js

  # Serve returns and cross-retailer if not yet
  grep -q '"/returns"' server/index.js || \
    sed -i 's#app.use(express.static(publicDir, { index: false }));#app.use(express.static(publicDir, { index: false }));\n\napp.get("/returns", (_req,res)=> res.sendFile(path.join(publicDir, "returns", "index.html")));#' server/index.js
  grep -q '"/cross-retailer"' server/index.js || \
    sed -i 's#app.use(express.static(publicDir, { index: false }));#app.use(express.static(publicDir, { index: false }));\n\napp.get("/cross-retailer", (_req,res)=> res.sendFile(path.join(publicDir, "cross-retailer", "index.html")));#' server/index.js

  # Redirect old path to new
  grep -q '"/cross-retailer-customer"' server/index.js || \
    sed -i 's#app.use(express.static(publicDir, { index: false }));#app.use(express.static(publicDir, { index: false }));\n\napp.get("/cross-retailer-customer", (_req,res)=> res.redirect(302, "/cross-retailer"));#' server/index.js
fi

# ---------- Ensure retailer_zip added in inventory availability ----------
if [ -f server/inventory.js ]; then
  grep -q "retailer_zip" server/inventory.js || \
    sed -i 's/distance_km/distance_km,\n        retailer_zip: r?.zip/' server/inventory.js
fi

# ---------- Home: add links for all key pages (best-effort) ----------
# If home is a template in server response, insert links
if [ -f server/index.js ]; then
  # Cross-Retailer link
  grep -q "/cross-retailer" server/index.js || true
  # Add a small menu section (best-effort) to existing fallback home
  perl -0777 -pe 's#<ul>\\s*#<ul>\n    <li><a href="/cross-retailer">Cross-Retailer Shopping</a></li>\n    <li><a href="/admin/analytics">Admin: Analytics</a></li>\n    <li><a href="/admin/fulfillment">Admin: Fulfillment</a></li>\n    <li><a href="/returns">Customer Returns</a></li>\n#g' -i server/index.js 2>/dev/null || true
fi

# ---------- Roadmap touch-up ----------
if [ -f data/roadmap.json ]; then
python3 - <<'PY' || true
import json,sys,datetime
p="data/roadmap.json"
r=json.load(open(p))
def up(id,title,status):
  it=next((x for x in r.get("items",[]) if x.get("id")==id),None)
  if it: it.update({"title":title,"status":status})
  else: r.setdefault("items",[]).append({"id":id,"title":title,"status":status})
up("admin_auth","Admin Token Gate for /admin/* and write APIs","done")
up("ops_summary","Consolidated Ops Summary Endpoint","done")
r["last_updated"]=datetime.datetime.utcnow().isoformat()+"Z"
open(p,"w").write(json.dumps(r,indent=2))
PY
fi

echo "✅ Fixups installed.
Next:
  1) Set ADMIN_TOKEN in Replit Secrets (e.g., 'supersecret123').
  2) npm start
  3) For /admin/* pages, include header:  X-Admin-Token: <your token>  (or ?admin_token=... in URL)

Quick checks:
  • Ops summary:            GET /api/ops/summary
  • Rate limits in headers: GET /api/inventory/availability?...  (X-RateLimit-*)
  • Quote caching:          Hit /api/fulfillment/quote twice; second should be cache-fast (<10ms)
  • Admin gate:             Open /admin/fulfillment without token → 401
                             Then append ?admin_token=<token> → loads
  • Home links:             Visit / and see links to Cross-Retailer, Analytics, Fulfillment, Returns
"