import React, { useEffect, useState } from "react";

function classNames(...xs) { return xs.filter(Boolean).join(" "); }

export default function CloudantBadge({ pollMs = 15000 }) {
  const [state, setState] = useState({
    loading: true,
    connected: false,
    db: null,
    host: null,
    version: null,
    checkedAt: null,
    error: null,
  });

  useEffect(() => {
    let isMounted = true;
    const ctrl = new AbortController();

    async function fetchStatus() {
      try {
        const r = await fetch("/api/cloudant-status", { signal: ctrl.signal });
        const j = await r.json();
        if (!isMounted) return;
        setState({
          loading: false,
          connected: !!j?.connected,
          db: j?.data?.db ?? null,
          host: j?.data?.host ?? null,
          version: j?.data?.version ?? null,
          checkedAt: j?.now ?? new Date().toISOString(),
          error: j?.error ?? null,
        });
      } catch (e) {
        if (!isMounted) return;
        setState(s => ({ ...s, loading: false, connected: false, error: String(e) }));
      }
    }

    fetchStatus();
    const id = setInterval(fetchStatus, pollMs);
    return () => {
      isMounted = false;
      ctrl.abort();
      clearInterval(id);
    };
  }, [pollMs]);

  const color = state.loading
    ? "bg-yellow-100 text-yellow-800 ring-yellow-200"
    : state.connected
    ? "bg-green-100 text-green-800 ring-green-200"
    : "bg-red-100 text-red-800 ring-red-200";

  const dot = state.loading
    ? "bg-yellow-500"
    : state.connected
    ? "bg-green-500"
    : "bg-red-500";

  const label = state.loading
    ? "Checking Cloudantâ€¦"
    : state.connected
    ? "Cloudant: Connected"
    : "Cloudant: Disconnected";

  return (
    <div
      className={classNames(
        "inline-flex items-center gap-2 rounded-full px-3 py-1 text-sm font-medium ring-1",
        color
      )}
      title={
        state.connected
          ? `DB: ${state.db}\nHost: ${state.host}\nVersion: ${state.version}\nChecked: ${state.checkedAt}`
          : state.error
          ? `Error: ${state.error}\nChecked: ${state.checkedAt}`
          : `Checked: ${state.checkedAt}`
      }
      aria-live="polite"
    >
      <span className={classNames("h-2.5 w-2.5 rounded-full", dot)} />
      <span>{label}</span>
      {state.connected && state.db && (
        <span className="hidden sm:inline text-xs opacity-80">
          ({state.db} @ {state.host})
        </span>
      )}
    </div>
  );
}