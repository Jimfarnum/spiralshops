// ✅ SPIRAL Tiered Access Phase 3 — Continuous Integration Code
// Implements Stripe Plan Status API, React UI, and Dashboard Feature Gating

// 📁 /api/stripe-plan-status.js — Stripe Plan Status API
const express = require("express");
const router = express.Router();
const Stripe = require("stripe");
const stripe = Stripe("sk_test_YOUR_SECRET_KEY"); // Replace with real Stripe Secret Key

const planMap = {
  "price_FREE": "Free",
  "price_SILVER": "Silver",
  "price_GOLD": "Gold"
};

router.get("/plan-status/:customerId", async (req, res) => {
  try {
    const customerId = req.params.customerId;
    const subscriptions = await stripe.subscriptions.list({ customer: customerId, status: "active" });

    if (!subscriptions.data.length) {
      return res.json({ plan: "Free" });
    }

    const planId = subscriptions.data[0].items.data[0].price.id;
    const planName = planMap[planId] || "Unknown";

    res.json({ plan: planName });
  } catch (error) {
    console.error("❌ Plan status error:", error.message);
    res.status(500).json({ plan: "Free", error: error.message });
  }
});

module.exports = router;

// 📁 server.js — Connect API Route
const stripePlanStatus = require("./api/stripe-plan-status");
app.use("/api", stripePlanStatus);

// 📁 components/RetailerPlanStatus.jsx — Retailer UI Component
import React, { useEffect, useState } from "react";

const RetailerPlanStatus = ({ stripeCustomerId }) => {
  const [plan, setPlan] = useState("Loading...");

  useEffect(() => {
    fetch(`/api/plan-status/${stripeCustomerId}`)
      .then(res => res.json())
      .then(data => setPlan(data.plan));
  }, [stripeCustomerId]);

  return (
    <div style={{ padding: "1rem", border: "1px solid #ccc", marginBottom: "1rem" }}>
      <h3>🪪 Your SPIRAL Plan: {plan}</h3>
      {plan !== "Gold" && (
        <a href="/upgrade-plan">
          <button>🔼 Upgrade to {plan === "Silver" ? "Gold" : "Silver or Gold"}</button>
        </a>
      )}
    </div>
  );
};

export default RetailerPlanStatus;

// 📁 RetailerDashboard.jsx — Add Feature Gating Logic + Component
import RetailerPlanStatus from "./RetailerPlanStatus";

const RetailerDashboard = () => {
  const stripeCustomerId = "cus_ABC123"; // replace with dynamic ID

  return (
    <div>
      <RetailerPlanStatus stripeCustomerId={stripeCustomerId} />

      {/* Gated Features */}
      {plan === "Gold" && <AdvancedAnalytics />}
      {plan !== "Free" && <PromoBoostTools />}
      {plan === "Free" && <p>⚠️ Upgrade to unlock premium tools</p>}
    </div>
  );
};