/*
 * Advanced Logistics Module for Spiralshops
 *
 * This module provides a set of React components to implement an
 * advanced logistics dashboard for Spiralshops.  The goal is to
 * enable local brick‑and‑mortar retailers to manage delivery zones,
 * track drivers in real time, optimize routes, and view delivery
 * analytics—all while keeping the implementation flexible enough to
 * deploy on Replit, Vercel, or IBM Cloud.  The components here are
 * intentionally kept self‑contained and mock out data where
 * necessary.  Real implementations should replace the stubbed
 * functions with calls to your own backend API or IBM Watson
 * services.
 *
 * Components included:
 *
 *   ‣ DeliveryZoneManager – Create and manage delivery zones.  Each
 *     zone has a name and a set of coordinates.  For demo
 *     purposes, zones are stored in local state and displayed in a
 *     simple list.
 *
 *   ‣ DriverTracker – Display a list of drivers and their current
 *     positions.  Positions are updated on an interval to simulate
 *     movement.  You can replace the simulated data with WebSocket
 *     feeds or polling from your backend.
 *
 *   ‣ RouteOptimizer – Accepts a list of stops and produces an
 *     optimized order.  A stubbed function demonstrates how you
 *     might call an external optimization service (e.g., IBM Watson
 *     Optimization API).  It displays the optimized route and a
 *     simple map preview using an OpenStreetMap iframe.
 *
 *   ‣ AnalyticsDashboard – Summarizes delivery performance metrics
 *     such as total deliveries, on‑time percentage, and average
 *     delivery time.  Uses generated data for demonstration.
 *
 *   ‣ AdvancedLogisticsPage – A composite page that assembles all
 *     these components together.  Export this component to expose
 *     the /advanced-logistics route on your site.
 *
 * Usage: Import AdvancedLogisticsPage in your routing configuration
 * and render it at the `/advanced-logistics` route.  Each
 * component can also be used independently.
 */

import React, { useState, useEffect } from 'react';

/* ------------------------------------------------------------------
 * DeliveryZoneManager
 *
 * Allows administrators to create, edit, and remove delivery zones.
 * A delivery zone might represent a geographic area (e.g., a city
 * neighborhood) where you offer same‑day delivery.  In this demo,
 * zones are defined by a name and a simple description.  In a real
 * implementation you could attach polygon coordinates or zip codes.
 */
function DeliveryZoneManager() {
  const [zones, setZones] = useState([
    { id: 1, name: 'Downtown', description: 'Central business district' },
    { id: 2, name: 'Uptown', description: 'Residential and shopping area' },
  ]);
  const [newZoneName, setNewZoneName] = useState('');
  const [newZoneDescription, setNewZoneDescription] = useState('');

  function addZone() {
    if (!newZoneName.trim()) return;
    const newZone = {
      id: Date.now(),
      name: newZoneName.trim(),
      description: newZoneDescription.trim(),
    };
    setZones([...zones, newZone]);
    setNewZoneName('');
    setNewZoneDescription('');
  }

  function removeZone(id) {
    setZones(zones.filter((z) => z.id !== id));
  }

  return (
    <section style={{ marginBottom: 32 }}>
      <h2>Delivery Zone Management</h2>
      <p>Create and manage the areas where your drivers can deliver.  Zones
      help restrict same‑day delivery to regions you can service.</p>
      <div style={{ marginBottom: 16 }}>
        <input
          type="text"
          placeholder="Zone name"
          value={newZoneName}
          onChange={(e) => setNewZoneName(e.target.value)}
          style={{ marginRight: 8, padding: 4 }}
        />
        <input
          type="text"
          placeholder="Description"
          value={newZoneDescription}
          onChange={(e) => setNewZoneDescription(e.target.value)}
          style={{ marginRight: 8, padding: 4 }}
        />
        <button onClick={addZone}>Add Zone</button>
      </div>
      <ul style={{ listStyle: 'none', padding: 0 }}>
        {zones.map((zone) => (
          <li
            key={zone.id}
            style={{
              border: '1px solid #ccc',
              borderRadius: 4,
              padding: 8,
              marginBottom: 8,
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
            }}
          >
            <div>
              <strong>{zone.name}</strong> – {zone.description || 'No description'}
            </div>
            <button onClick={() => removeZone(zone.id)} style={{ color: 'red' }}>
              Remove
            </button>
          </li>
        ))}
      </ul>
    </section>
  );
}

/* ------------------------------------------------------------------
 * DriverTracker
 *
 * Shows the current positions of your delivery drivers.  In this
 * demo, we simulate drivers moving by updating their coordinates
 * every few seconds.  Replace the simulated update with real data
 * from your backend (e.g., via WebSockets, SSE, or REST polling).
 */
function DriverTracker() {
  // Example driver list with initial positions.  Latitude/longitude
  // coordinates represent somewhere in Minneapolis for demonstration.
  const [drivers, setDrivers] = useState([
    { id: 1, name: 'Alice', lat: 44.9778, lng: -93.2650, status: 'Delivering' },
    { id: 2, name: 'Bob', lat: 44.9833, lng: -93.2667, status: 'On break' },
    { id: 3, name: 'Carlos', lat: 44.9750, lng: -93.2619, status: 'Delivering' },
  ]);

  useEffect(() => {
    // Simulate driver movement by slightly tweaking lat/lng values every 5 seconds
    const interval = setInterval(() => {
      setDrivers((prev) =>
        prev.map((driver) => {
          const deltaLat = (Math.random() - 0.5) * 0.001;
          const deltaLng = (Math.random() - 0.5) * 0.001;
          return { ...driver, lat: driver.lat + deltaLat, lng: driver.lng + deltaLng };
        })
      );
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <section style={{ marginBottom: 32 }}>
      <h2>Driver Tracking</h2>
      <p>Monitor the real‑time locations and statuses of your delivery drivers.</p>
      <table style={{ width: '100%', borderCollapse: 'collapse' }}>
        <thead>
          <tr>
            <th style={{ textAlign: 'left', borderBottom: '1px solid #ccc', padding: 8 }}>Driver</th>
            <th style={{ textAlign: 'left', borderBottom: '1px solid #ccc', padding: 8 }}>Latitude</th>
            <th style={{ textAlign: 'left', borderBottom: '1px solid #ccc', padding: 8 }}>Longitude</th>
            <th style={{ textAlign: 'left', borderBottom: '1px solid #ccc', padding: 8 }}>Status</th>
          </tr>
        </thead>
        <tbody>
          {drivers.map((driver) => (
            <tr key={driver.id}>
              <td style={{ borderBottom: '1px solid #eee', padding: 8 }}>{driver.name}</td>
              <td style={{ borderBottom: '1px solid #eee', padding: 8 }}>{driver.lat.toFixed(5)}</td>
              <td style={{ borderBottom: '1px solid #eee', padding: 8 }}>{driver.lng.toFixed(5)}</td>
              <td style={{ borderBottom: '1px solid #eee', padding: 8 }}>{driver.status}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </section>
  );
}

/* ------------------------------------------------------------------
 * RouteOptimizer
 *
 * Allows dispatchers to input a set of stops and request an optimized
 * route.  The `optimizeRoute` function is a stub where you can
 * integrate with a real optimization service like IBM Watson
 * Optimization or your own algorithm.  The optimized route is
 * displayed in order along with a simple OpenStreetMap iframe to
 * visualize the route area.  For production, consider using
 * Leaflet, Mapbox, or Google Maps APIs to draw polylines.
 */
function RouteOptimizer() {
  const [stopsInput, setStopsInput] = useState('');
  const [optimizedRoute, setOptimizedRoute] = useState([]);
  const [loading, setLoading] = useState(false);

  // Stub: Pretend to call an external API to optimize the route
  async function optimizeRoute(stops) {
    // In a real implementation, make a network request here.  For
    // example:
    // const response = await fetch('/api/optimize-route', {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify({ stops }),
    // });
    // const data = await response.json();
    // return data.optimized;

    // Simulate a delay and a simple sort by alphabetical order
    await new Promise((resolve) => setTimeout(resolve, 1000));
    return stops.slice().sort();
  }

  async function handleOptimize(event) {
    event.preventDefault();
    const stops = stopsInput
      .split(',')
      .map((s) => s.trim())
      .filter((s) => s);
    if (stops.length < 2) {
      alert('Please enter at least two stops separated by commas.');
      return;
    }
    setLoading(true);
    const result = await optimizeRoute(stops);
    setOptimizedRoute(result);
    setLoading(false);
  }

  return (
    <section style={{ marginBottom: 32 }}>
      <h2>Route Optimization</h2>
      <p>Enter a list of stops (e.g., customer addresses or zip codes) separated by
      commas to generate an optimized delivery sequence.</p>
      <form onSubmit={handleOptimize} style={{ marginBottom: 16 }}>
        <textarea
          value={stopsInput}
          onChange={(e) => setStopsInput(e.target.value)}
          placeholder="Stop A, Stop B, Stop C..."
          rows={3}
          style={{ width: '100%', padding: 8 }}
        ></textarea>
        <button type="submit" disabled={loading} style={{ marginTop: 8 }}>
          {loading ? 'Optimizing...' : 'Optimize Route'}
        </button>
      </form>
      {optimizedRoute.length > 0 && (
        <div style={{ marginTop: 16 }}>
          <strong>Optimized Sequence:</strong>
          <ol>
            {optimizedRoute.map((stop, index) => (
              <li key={index}>{stop}</li>
            ))}
          </ol>
          {/* Simple map preview using OpenStreetMap.  Replace the
              latitude/longitude coordinates below with your own
              bounding box to center the map on your delivery area. */}
          <div style={{ marginTop: 16 }}>
            <iframe
              title="map-preview"
              width="100%"
              height="300"
              style={{ border: 0 }}
              src="https://www.openstreetmap.org/export/embed.html?bbox=-93.274%2C44.965%2C-93.24%2C44.991&layer=mapnik"
              allowFullScreen
            ></iframe>
          </div>
        </div>
      )}
    </section>
  );
}

/* ------------------------------------------------------------------
 * AnalyticsDashboard
 *
 * Presents basic analytics about deliveries.  In a real system,
 * these metrics would come from your backend database.  Here we
 * generate some sample data for demonstration.  You can extend this
 * component with charts (e.g., using Chart.js or Recharts) and more
 * detailed metrics.
 */
function AnalyticsDashboard() {
  // Generate some sample metrics
  const [metrics, setMetrics] = useState({
    totalDeliveries: 127,
    onTimeRate: 0.92,
    avgDeliveryMinutes: 35,
    zonesServed: 3,
  });

  // Example effect to periodically update metrics (simulated)
  useEffect(() => {
    const interval = setInterval(() => {
      setMetrics((prev) => ({
        ...prev,
        totalDeliveries: prev.totalDeliveries + Math.floor(Math.random() * 5),
        onTimeRate: Math.min(1, Math.max(0.8, prev.onTimeRate + (Math.random() - 0.5) * 0.02)),
        avgDeliveryMinutes: Math.max(25, Math.min(45, prev.avgDeliveryMinutes + (Math.random() - 0.5) * 2)),
      }));
    }, 10000);
    return () => clearInterval(interval);
  }, []);

  return (
    <section style={{ marginBottom: 32 }}>
      <h2>Delivery Analytics</h2>
      <p>Key performance indicators for your delivery operations.</p>
      <div style={{ display: 'flex', gap: 16, flexWrap: 'wrap' }}>
        <MetricCard title="Total Deliveries" value={metrics.totalDeliveries} />
        <MetricCard title="On‑Time Delivery Rate" value={`${(metrics.onTimeRate * 100).toFixed(1)}%`} />
        <MetricCard title="Avg. Delivery Time" value={`${metrics.avgDeliveryMinutes} mins`} />
        <MetricCard title="Zones Served" value={metrics.zonesServed} />
      </div>
    </section>
  );
}

function MetricCard({ title, value }) {
  return (
    <div
      style={{
        flex: '1 1 200px',
        border: '1px solid #ddd',
        borderRadius: 4,
        padding: 16,
        textAlign: 'center',
        boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
      }}
    >
      <div style={{ fontSize: 24, fontWeight: 'bold' }}>{value}</div>
      <div style={{ fontSize: 14, color: '#666' }}>{title}</div>
    </div>
  );
}

/* ------------------------------------------------------------------
 * AdvancedLogisticsPage
 *
 * Combines all the logistics components into a single page.  Use
 * this component to expose the advanced logistics features to your
 * administrators.  For Vercel (Next.js), you might add this as a
 * file under pages/advanced-logistics.jsx.  For a Create React App
 * project, add a route in your router pointing to this component.
 */
function AdvancedLogisticsPage() {
  return (
    <div style={{ padding: 24, maxWidth: 900, margin: '0 auto' }}>
      <h1>Advanced Logistics Dashboard</h1>
      <p>Manage your delivery operations with real‑time data and AI‑powered
      optimization.  All functionality here is ready to integrate with
      your own backend APIs or IBM Watson services.</p>
      <DeliveryZoneManager />
      <DriverTracker />
      <RouteOptimizer />
      <AnalyticsDashboard />
    </div>
  );
}

export {
  DeliveryZoneManager,
  DriverTracker,
  RouteOptimizer,
  AnalyticsDashboard,
  AdvancedLogisticsPage,
};