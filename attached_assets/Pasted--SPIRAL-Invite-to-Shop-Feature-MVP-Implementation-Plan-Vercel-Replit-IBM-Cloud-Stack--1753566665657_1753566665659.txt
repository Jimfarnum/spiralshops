// SPIRAL "Invite to Shop" Feature â€“ MVP Implementation Plan (Vercel + Replit + IBM Cloud) // Stack: React (frontend), Node/Express (backend), IBM Cloudant (DB), IBM Watson (AI), Vercel (hosting)

/* ðŸ“Œ OBJECTIVE: Allow a logged-in shopper to schedule a shopping trip or pickup and invite 1â€“2 friends. The original shopper gets special deals, and the guests get the same deals for the day if they accept the invite. */

//---------------------------------------------// // 1. FRONTEND: React Components //---------------------------------------------//

// InviteTripForm.jsx import React, { useState } from 'react'; import axios from 'axios';

export default function InviteTripForm({ userId }) { const [date, setDate] = useState(""); const [location, setLocation] = useState(""); const [invitees, setInvitees] = useState([""]);

const handleSubmit = async (e) => { e.preventDefault(); const response = await axios.post('/api/invite-trip', { userId, date, location, invitees }); alert("Invites sent! Deals will appear shortly."); };

return ( <form onSubmit={handleSubmit}> <h3>Plan Your SPIRAL Trip</h3> <input type="date" value={date} onChange={(e) => setDate(e.target.value)} required /> <input type="text" placeholder="Mall/Store" value={location} onChange={(e) => setLocation(e.target.value)} required /> {invitees.map((email, i) => ( <input key={i} type="email" placeholder={Invite Email ${i + 1}} value={email} onChange={(e) => { const newInvites = [...invitees]; newInvites[i] = e.target.value; setInvitees(newInvites); }} required /> ))} <button type="button" onClick={() => invitees.length < 2 && setInvitees([...invitees, ""]) }>+ Add Another</button> <button type="submit">Send Invites</button> </form> ); }

//---------------------------------------------// // 2. BACKEND: Express API Endpoint //---------------------------------------------//

// routes/inviteTrip.js const express = require('express'); const router = express.Router(); const { CloudantV1 } = require('@ibm-cloud/cloudant'); const nodemailer = require('nodemailer');

router.post('/invite-trip', async (req, res) => { const { userId, date, location, invitees } = req.body;

// Save invite to IBM Cloudant const cloudant = CloudantV1.newInstance({}); const db = cloudant.useDb('spiral_invites');

await db.post({ userId, date, location, invitees, createdAt: new Date() });

// Notify invitees (simple email for MVP) const transporter = nodemailer.createTransport({ service: 'gmail', // Replace with production email later auth: { user: process.env.EMAIL, pass: process.env.EMAIL_PASS } });

for (let email of invitees) { await transporter.sendMail({ from: process.env.EMAIL, to

