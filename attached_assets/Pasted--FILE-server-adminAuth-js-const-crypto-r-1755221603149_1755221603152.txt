# =========================
# FILE: server/adminAuth.js
# =========================
const crypto = require("crypto");

// --- helpers ---
function b64url(buf) {
  return Buffer.from(buf).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
function sign(data, secret) {
  return b64url(crypto.createHmac("sha256", secret).update(data).digest());
}
function makeToken({ sid, exp }, secret) {
  const payload = b64url(JSON.stringify({ sid, exp }));
  const sig = sign(payload, secret);
  return `${payload}.${sig}`;
}
function parseToken(token) {
  const [payloadB64, sig] = String(token || "").split(".");
  if (!payloadB64 || !sig) return null;
  try { return { payloadB64, sig, payload: JSON.parse(Buffer.from(payloadB64, "base64").toString("utf8")) }; }
  catch { return null; }
}
function parseCookies(header = "") {
  return header.split(";").reduce((acc, part) => {
    const [k, ...v] = part.trim().split("=");
    if (!k) return acc;
    acc[k] = decodeURIComponent(v.join("=") || "");
    return acc;
  }, {});
}
function secureFlag(req) {
  return (req.protocol === "https") || (req.headers["x-forwarded-proto"] === "https");
}

// --- API ---
exports.createSessionCookie = (req, res) => {
  const secret = process.env.ADMIN_SESSION_SECRET;
  if (!secret) throw new Error("Missing ADMIN_SESSION_SECRET");
  const sid = crypto.randomBytes(16).toString("hex");
  const hours = Number(process.env.ADMIN_SESSION_HOURS || 12);
  const exp = Date.now() + hours * 60 * 60 * 1000;
  const token = makeToken({ sid, exp }, secret);

  const cookie = [
    `admin_session=${token}`,
    "HttpOnly",
    "SameSite=Strict",
    "Path=/",
    `Max-Age=${Math.floor(hours * 60 * 60)}`
  ];
  if (secureFlag(req)) cookie.push("Secure");
  res.setHeader("Set-Cookie", cookie.join("; "));
};

exports.clearSessionCookie = (req, res) => {
  const cookie = [
    "admin_session=",
    "HttpOnly",
    "SameSite=Strict",
    "Path=/",
    "Max-Age=0"
  ];
  if (secureFlag(req)) cookie.push("Secure");
  res.setHeader("Set-Cookie", cookie.join("; "));
};

exports.guard = (req, res, next) => {
  try {
    // Allow health checks to pass if you have any (optional)
    // if (req.path === "/techwatch/health") return next();

    const secret = process.env.ADMIN_SESSION_SECRET;
    if (!secret) throw new Error("Missing ADMIN_SESSION_SECRET");

    const cookies = parseCookies(req.headers.cookie || "");
    const tok = cookies.admin_session;
    if (!tok) return res.status(401).json({ ok: false, error: "Unauthorized" });

    const parsed = parseToken(tok);
    if (!parsed) return res.status(401).json({ ok: false, error: "Unauthorized" });

    const expected = sign(parsed.payloadB64, secret);
    if (crypto.timingSafeEqual(Buffer.from(expected), Buffer.from(parsed.sig)) !== true) {
      return res.status(401).json({ ok: false, error: "Unauthorized" });
    }
    if (!parsed.payload?.exp || Date.now() > parsed.payload.exp) {
      return res.status(401).json({ ok: false, error: "Session expired" });
    }
    // Passed
    return next();
  } catch (e) {
    console.error("adminAuth.guard error:", e.message);
    return res.status(401).json({ ok: false, error: "Unauthorized" });
  }
};

# =========================
# FILE: server/adminAuthRoutes.js
# =========================
const express = require("express");
const router = express.Router();
const { createSessionCookie, clearSessionCookie } = require("./adminAuth");

// Body parsing for JSON (mounted only for these routes)
router.use(express.json({ limit: "32kb" }));

// POST /admin/login  { "token": "..." }
router.post("/login", (req, res) => {
  try {
    const supplied = String(req.body?.token || "");
    const expected = String(process.env.ADMIN_TOKEN || "");
    if (!expected) return res.status(500).json({ ok: false, error: "ADMIN_TOKEN not set" });
    if (!supplied || supplied !== expected) {
      return res.status(401).json({ ok: false, error: "Invalid token" });
    }
    createSessionCookie(req, res);
    return res.json({ ok: true });
  } catch (e) {
    console.error(e);
    return res.status(500).json({ ok: false, error: "Login failed" });
  }
});

// POST /admin/logout
router.post("/logout", (req, res) => {
  try {
    clearSessionCookie(req, res);
    return res.json({ ok: true });
  } catch (e) {
    console.error(e);
    return res.status(500).json({ ok: false, error: "Logout failed" });
  }
});

module.exports = router;

# =========================
# FILE: server/adminTechwatchRoute.js  (REPLACE with this version)
# =========================
const express = require("express");
const fs = require("fs");
const path = require("path");
const { guard } = require("./adminAuth");

const router = express.Router();
const ROOT = path.join(process.cwd(), "agents", "techwatch");
const REPORTS_DIR = path.join(ROOT, "reports");

// Public: health (optional)
router.get("/techwatch/health", (_req, res) => res.json({ ok: true }));

// Protected routes below
router.use(guard);

function latestReportDir() {
  const dates = fs.readdirSync(REPORTS_DIR).filter(d => /^\d{4}-\d{2}-\d{2}$/.test(d)).sort();
  if (!dates.length) return null;
  return path.join(REPORTS_DIR, dates[dates.length - 1]);
}

router.get("/techwatch/latest", (req, res) => {
  try {
    const dir = latestReportDir();
    if (!dir) return res.json({ ok: true, report: [] });
    const report = JSON.parse(fs.readFileSync(path.join(dir, "report.json"), "utf8"));
    res.json({ ok: true, report, dir });
  } catch (e) {
    console.error(e); res.status(500).json({ ok: false, error: e.message });
  }
});

router.post("/techwatch/initiate", async (req, res) => {
  try {
    const { run } = require("../agents/techwatch/implementor");
    const result = await run();
    res.json({ ok: true, result });
  } catch (e) {
    console.error(e); res.status(500).json({ ok: false, error: e.message });
  }
});

router.post("/techwatch/kpi", async (req, res) => {
  try {
    await require("../agents/techwatch/kpi_job");
    res.json({ ok: true });
  } catch (e) {
    console.error(e); res.status(500).json({ ok: false, error: e.message });
  }
});

router.post("/techwatch/kpi/comment", async (req, res) => {
  try {
    await require("../agents/techwatch/gh_commenter");
    res.json({ ok: true });
  } catch (e) {
    console.error(e); res.status(500).json({ ok: false, error: e.message });
  }
});

module.exports = router;

# =========================
# FILE: server/index.js  (SNIPPET — add these lines near your server bootstrap)
# =========================
// const express = require("express");
// const app = express();
const securityHeaders = require("./securityHeaders");
app.use(securityHeaders());

// --- mount auth routes first (public: /admin/login, /admin/logout) ---
const adminAuthRoutes = require("./adminAuthRoutes");
app.use("/admin", adminAuthRoutes);

// --- then mount protected admin routes (guard happens inside) ---
const adminTechwatch = require("./adminTechwatchRoute");
app.use("/admin", adminTechwatch);

# =========================
# FILE: app/AdminLogin.jsx
# =========================
import React, { useState } from "react";

export default function AdminLogin() {
  const [token, setToken] = useState("");
  const [msg, setMsg] = useState("");

  async function onSubmit(e) {
    e.preventDefault();
    setMsg("Signing in…");
    try {
      const res = await fetch("/admin/login", {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify({ token })
      });
      const data = await res.json();
      if (!data.ok) return setMsg(data.error || "Login failed");
      setMsg("Success. Redirecting…");
      window.location.href = "/admin/techwatch";
    } catch (e) {
      setMsg("Login error");
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-6">
      <form onSubmit={onSubmit} className="w-full max-w-sm p-6 rounded-2xl shadow border">
        <h1 className="text-xl font-semibold mb-4">Admin Sign-in</h1>
        <label className="block text-sm mb-1">Admin Token</label>
        <input
          type="password"
          value={token}
          onChange={e => setToken(e.target.value)}
          className="w-full border rounded-lg px-3 py-2 mb-3"
          placeholder="Enter ADMIN_TOKEN"
          required
        />
        <button className="w-full bg-black text-white rounded-lg py-2">Sign in</button>
        {msg && <div className="mt-3 text-sm text-gray-700">{msg}</div>}
      </form>
    </div>
  );
}

# =========================
# FILE: app/AdminTechWatch.jsx  (MINOR UPDATE to handle 401 → redirect to login)
# =========================
import React, { useEffect, useState } from "react";

export default function AdminTechWatch() {
  const [report, setReport] = useState([]);
  const [loading, setLoading] = useState(true);
  const [msg, setMsg] = useState("");

  async function fetchLatest() {
    setLoading(true);
    setMsg("");
    const res = await fetch("/admin/techwatch/latest");
    if (res.status === 401) { window.location.href = "/admin/login"; return; }
    const data = await res.json();
    setReport(Array.isArray(data.report) ? data.report : (data.report || []));
    setLoading(false);
  }

  useEffect(() => { fetchLatest(); }, []);

  async function post(path) {
    setMsg("Working…");
    const res = await fetch(`/admin/${path}`, { method: "POST" });
    if (res.status === 401) { window.location.href = "/admin/login"; return; }
    const data = await res.json();
    setMsg(data.ok ? "Done." : (data.error || "Error"));
    await fetchLatest();
  }

  return (
    <div className="p-6 max-w-6xl mx-auto">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold mb-4">TechWatch — AI R&D</h1>
        <form action="/admin/logout" method="post">
          <button className="px-3 py-1 rounded-lg border">Logout</button>
        </form>
      </div>

      <div className="flex gap-2 mb-4">
        <button onClick={() => post("techwatch/initiate")} className="px-4 py-2 rounded-2xl shadow bg-black text-white">Approve & Initiate</button>
        <button onClick={() => post("techwatch/kpi")} className="px-4 py-2 rounded-2xl shadow bg-gray-800 text-white">Compute KPIs</button>
        <button onClick={() => post("techwatch/kpi/comment")} className="px-4 py-2 rounded-2xl shadow bg-gray-700 text-white">Post KPI Update</button>
        <button onClick={fetchLatest} className="px-4 py-2 rounded-2xl shadow border">Refresh</button>
      </div>

      {msg && <div className="mb-4 text-sm text-green-700">{msg}</div>}

      {loading ? (
        <div className="animate-pulse text-gray-500">Loading latest analysis…</div>
      ) : (
        <div className="grid md:grid-cols-2 gap-4">
          {(report || []).map((it, idx) => (
            <div key={idx} className="rounded-2xl shadow p-4 border">
              <div className="flex items-center justify-between mb-2">
                <h2 className="font-semibold text-lg pr-3 line-clamp-2">{it.title}</h2>
                <span className="text-xs px-2 py-1 rounded-full bg-gray-100 border">{it.topic}</span>
              </div>
              <p className="text-sm text-gray-700 line-clamp-4 mb-3">{it.summary}</p>
              <div className="text-xs text-gray-600 mb-3">
                Scores: Rel {it.scores?.relevance_0_5} • Now {it.scores?.impact_now_0_5} • 12mo {it.scores?.impact_12mo_0_5} • Effort {it.scores?.effort_low_med_high} • Legal {it.scores?.legal_risk_low_med_high}
              </div>
              <div className="flex items-center gap-3">
                <a href={it.url} target="_blank" rel="noreferrer" className="text-sm underline">Open</a>
                <span className="text-xs text-gray-500">Decision: <b>{it.decision}</b></span>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

# =========================
# FILE: app/routes.jsx  (SNIPPETS — mount routes)
# =========================
// import AdminLogin from "./AdminLogin";
// import AdminTechWatch from "./AdminTechWatch";
// <Route path="/admin/login" element={<AdminLogin />} />
// <Route path="/admin/techwatch" element={<AdminTechWatch />} />