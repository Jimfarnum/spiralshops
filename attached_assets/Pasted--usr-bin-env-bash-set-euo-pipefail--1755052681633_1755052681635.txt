#!/usr/bin/env bash
set -euo pipefail

# ─────────────────────────────────────────────────────────────
# SPIRAL Feature #5 — Customer Cross-Retailer UI (ZIP-gated, ETA badges)
# - Adds /cross-retailer customer page
# - ZIP input + "use my location"
# - Sort: Nearest | Best price | Most in stock
# - Shows pickup centers & delivery ETA if serviceable
# - Simple cart demo with reserve call (optimistic)
# - Adds homepage tile (if a basic home fallback exists)
# ─────────────────────────────────────────────────────────────

mkdir -p public/cross-retailer public/assets

# Add route to serve page if server exists
if [ -f server/index.js ]; then
  grep -q "/cross-retailer" server/index.js || \
  sed -i 's/app.use(express.static(publicDir, { index: false }));/app.use(express.static(publicDir, { index: false }));\n\napp.get("\\/cross-retailer", (_req,res)=>{ res.sendFile(path.join(publicDir, "cross-retailer", "index.html")); });/' server/index.js
fi

# If you have a simple homepage string fallback in server/index.js, inject a tile link
if [ -f server/index.js ]; then
  grep -q "Cross-Retailer Shopping" server/index.js || \
  sed -i 's#<ul>#<ul>\n    <li><a href="/cross-retailer">/cross-retailer</a> — Cross-Retailer Shopping (customer view)</li>#' server/index.js || true
fi

# Customer page
cat > public/cross-retailer/index.html << 'EOF'
<!doctype html>
<html lang="en">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>SPIRAL — Cross-Retailer Shopping</title>
<meta name="description" content="One cart. Thousands of local stores. Same-day local delivery and pickup where available.">
<link rel="preconnect" href="https://cdn.jsdelivr.net">
<style>
:root { --ink:#0b1220; --muted:#6b7280; --btn:#111827; --br:14px; }
*{box-sizing:border-box}
body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial;color:var(--ink);background:#fff}
.wrap{max-width:1080px;margin:0 auto;padding:22px}
h1{margin:0 0 10px}
.small{color:var(--muted);font-size:.92rem}
.card{border:1px solid #e5e7eb;border-radius:var(--br);padding:14px;margin:10px 0;background:#fff}
.row{display:flex;gap:8px;flex-wrap:wrap;align-items:center}
input,select,button{padding:10px;border:1px solid #d1d5db;border-radius:12px}
button.btn{background:var(--btn);color:#fff;border:none;cursor:pointer}
.grid{display:grid;grid-template-columns:repeat(3,minmax(0,1fr));gap:12px}
@media (max-width:900px){ .grid{grid-template-columns:1fr 1fr} }
@media (max-width:640px){ .grid{grid-template-columns:1fr} }
.tile{border:1px solid #e5e7eb;border-radius:var(--br);padding:12px;display:flex;flex-direction:column;gap:8px}
.badge{background:#f3f4f6;border-radius:999px;padding:4px 8px}
.price{font-weight:600}
.kv{display:flex;gap:8px;flex-wrap:wrap;align-items:center}
footer{margin:24px 0;color:var(--muted)}
hr{border:none;border-top:1px solid #e5e7eb;margin:12px 0}
.empty{border:1px dashed #e5e7eb;border-radius:var(--br);padding:20px;text-align:center;color:var(--muted)}
</style>

<div class="wrap">
  <header class="row" style="justify-content:space-between">
    <div class="row" style="gap:12px">
      <img src="/logo.png" alt="SPIRAL" style="height:36px" onerror="this.style.display='none'">
      <div>
        <h1>Cross-Retailer Shopping</h1>
        <div class="small">Find stock across all local stores • One cart • Local delivery & pickup where available</div>
      </div>
    </div>
    <a href="/" class="small">Back to Home</a>
  </header>

  <div class="card">
    <div class="row">
      <input id="sku" placeholder="Search SKU or Title (e.g. SKU-HEADPHONES-01)" style="min-width:280px">
      <input id="zip" placeholder="Your ZIP (e.g. 55101)" style="width:110px">
      <input id="radius" placeholder="Radius KM (e.g. 30)" style="width:120px">
      <select id="sort">
        <option value="nearest">Sort: Nearest</option>
        <option value="price">Sort: Best price</option>
        <option value="qty">Sort: Most in stock</option>
      </select>
      <button class="btn" onclick="useLocation()">Use my location</button>
      <button class="btn" onclick="search()">Search</button>
      <span id="hint" class="badge"></span>
    </div>
    <div class="small">Tip: enter ZIP for delivery/pickup eligibility. “Use my location” improves nearest sorting.</div>
  </div>

  <div id="results" class="grid"></div>

  <div class="card">
    <h3>Your Cart (demo)</h3>
    <div id="cart" class="empty">No items yet. Add from results.</div>
  </div>

  <div class="card" id="pickupBlock" style="display:none">
    <h3>Pickup Centers Near You</h3>
    <div id="pickupList" class="grid"></div>
  </div>

  <footer>© SPIRAL — Tech that builds towns</footer>
</div>

<script>
let coords=null, shopperZip=null, cart=[];
function setHint(msg){ document.getElementById('hint').textContent = msg||''; }
function useLocation(){
  if(!navigator.geolocation){ alert('Geolocation not available'); return; }
  navigator.geolocation.getCurrentPosition(p=>{
    coords = { lat:p.coords.latitude, lng:p.coords.longitude };
    setHint('Location set');
  }, _=> alert('Could not get location'));
}
function svcBadge(serviceable){ return serviceable ? '<span class="badge">30–90 min eligible</span>' : '<span class="badge">Same/next-day in select areas</span>'; }
function etaText(eta){ return Array.isArray(eta) ? `${eta[0]}–${eta[1]} min` : '—'; }

async function search(){
  const sku = document.getElementById('sku').value.trim();
  const zip = (shopperZip = (document.getElementById('zip').value||'').trim());
  const radius = document.getElementById('radius').value.trim();
  if(!sku){ alert('Enter a SKU to search'); return; }

  const qs = new URLSearchParams({ sku });
  if(coords){ qs.set('lat', coords.lat); qs.set('lng', coords.lng); }
  if(radius) qs.set('radius_km', radius);
  if(zip) qs.set('zip', zip);

  const res = await fetch('/api/inventory/availability?'+qs.toString());
  const data = await res.json();

  // Optional fetch of pickup centers (to display when serviceable)
  let pickups = [];
  try{
    const pc = await (await fetch('/api/fulfillment/pickup-centers')).json();
    pickups = pc || [];
  }catch(e){}

  renderResults(data, pickups, zip);
}

function sortResults(items, mode){
  const arr = [...items];
  if(mode==='price') arr.sort((a,b)=> (a.price??1e9) - (b.price??1e9));
  else if(mode==='qty') arr.sort((a,b)=> (b.qty||0) - (a.qty||0));
  else arr.sort((a,b)=> (a.distance_km??1e9) - (b.distance_km??1e9));
  return arr;
}

async function quote(fromZip, toZip, kg){
  const q = new URLSearchParams({ from_zip: fromZip, to_zip: toZip, weight_kg: kg||1 });
  const r = await fetch('/api/fulfillment/quote?'+q.toString());
  return r.ok ? r.json() : null;
}

function renderResults(items, pickups, zip){
  const mode = document.getElementById('sort').value;
  const list = document.getElementById('results'); list.innerHTML='';
  const sorted = sortResults(items||[], mode);

  if(!sorted.length){
    list.innerHTML = '<div class="empty" style="grid-column:1/-1">No local availability found. Try a larger radius or different ZIP.</div>';
    document.getElementById('pickupBlock').style.display='none';
    return;
  }

  let anyServiceable = false;

  sorted.forEach(async it=>{
    // fetch a quick quote if ZIP provided (best price & ETA)
    let quoteData = null, eta = null, bestPrice = null, serviceable = null;
    if(zip){
      try{
        const q = await quote(it.retailer_zip||zip, zip, 1);
        if(q && q.quotes && q.quotes.length){
          anyServiceable = anyServiceable || q.quotes[0].serviceable;
          serviceable = q.quotes[0].serviceable;
          bestPrice = q.quotes[0].price;
          eta = q.quotes[0].eta_mins;
        }
      }catch(e){}
    }

    const card = document.createElement('div');
    card.className = 'tile';
    card.innerHTML = `
      <div class="kv">
        <strong>${it.title||it.sku}</strong>
        ${serviceable!==null ? svcBadge(serviceable) : ''}
      </div>
      <div class="small">${it.retailer_name} • ${it.distance_km!=null? it.distance_km.toFixed(1)+' km':'distance n/a'}</div>
      <div class="kv">
        <span class="price">$${Number(it.price||0).toFixed(2)}</span>
        <span class="badge">Qty: ${it.qty}</span>
        ${eta ? `<span class="badge">ETA ${etaText(eta)}</span>` : ''}
        ${bestPrice!=null ? `<span class="badge">From $${bestPrice.toFixed(2)}</span>` : ''}
      </div>
      <div class="row">
        <button class="btn" onclick='addToCart(${JSON.stringify({retailer_id:it.retailer_id, sku:it.sku, title:it.title, price:it.price}).replace(/"/g,"&quot;")})'>Add to cart</button>
      </div>
    `;
    list.appendChild(card);
  });

  // show pickups if any serviceable ZIP context
  const pb = document.getElementById('pickupBlock');
  const pl = document.getElementById('pickupList'); pl.innerHTML='';
  if(anyServiceable){
    pb.style.display = '';
    pickups.forEach(p=>{
      const d = document.createElement('div');
      d.className='tile';
      d.innerHTML = `<strong>${p.name}</strong><div class="small">${p.address||''} • ${p.zip}</div><span class="badge">Hours: ${p.hours}</span><span class="badge">Capacity: ${p.capacity}</span>`;
      pl.appendChild(d);
    });
  } else {
    pb.style.display = 'none';
  }
}

async function addToCart(item){
  // simple optimistic reserve call against the first matching retailer
  try {
    const body = { retailer_id:item.retailer_id, sku:item.sku, qty:1 };
    const r = await fetch('/api/inventory/reserve',{ method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(body) });
    if(r.ok){
      cart.push({ ...item, qty:1 });
      renderCart();
    } else {
      alert('Could not reserve item (out of stock)');
    }
  } catch(e){
    alert('Reserve failed');
  }
}
function renderCart(){
  const el = document.getElementById('cart');
  if(!cart.length){ el.className='empty'; el.textContent='No items yet. Add from results.'; return; }
  el.className='';
  const sum = cart.reduce((s,i)=>s + (i.price||0)*i.qty, 0);
  el.innerHTML = cart.map(i=>`<div class="row" style="justify-content:space-between"><div>${i.title} <span class="small">(${i.sku})</span></div><div>$${(i.price||0).toFixed(2)}</div></div>`).join('') + `<hr><div class="row" style="justify-content:space-between"><strong>Total</strong><strong>$${sum.toFixed(2)}</strong></div>`;
}
</script>
EOF

# If a basic fallback homepage exists, add an Analytics + Cross-Retailer tile link
if [ -f public/index.fallback.html ]; then
  grep -q "/cross-retailer" public/index.fallback.html || \
  sed -i 's#</div>\n\n    <section>#      <a class="btn alt" href="/cross-retailer">Cross-Retailer Shopping</a>\n    </div>\n\n    <section>#' public/index.fallback.html
fi

echo "✅ Customer Cross-Retailer UI installed.
Start the server: npm start
Open: /cross-retailer

Smoke test:
  1) Enter SKU (e.g., SKU-HEADPHONES-01)
  2) Enter ZIP (e.g., 55101), radius 30, Search
  3) Toggle sort (Nearest | Best price | Most in stock)
  4) Add to cart (demo reserve)
  5) Pickup centers appear when area is serviceable
"